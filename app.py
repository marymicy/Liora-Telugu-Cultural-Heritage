import streamlit as st
import os
from PIL import Image
import pandas as pd
import numpy as np
import torch
from torchvision import transforms
from local_utils import load_data_from_folders, preprocess_image, save_uploaded_file, CulturalClassifier, TextClassifier, load_text_content
import json
from datetime import datetime
from sklearn.metrics.pairwise import cosine_similarity
import joblib
import base64
from swecha_api import get_swecha_search_results, upload_to_swecha, swecha_client

# Set page configuration
st.set_page_config(
    page_title="‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞∏‡∞æ‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø‡∞ï ‡∞µ‡∞æ‡∞∞‡∞∏‡∞§‡±ç‡∞µ‡∞Ç",
    page_icon="üáÆüá≥",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Function to set background image
def set_background_image(image_path):
    with open(image_path, "rb") as image_file:
        encoded_string = base64.b64encode(image_file.read()).decode()
    
    bg_css = f"""
    <style>
    .stApp {{
        background-image: url("data:image/jpg;base64,{encoded_string}");
        background-size: cover;
        background-repeat: no-repeat;
        background-attachment: fixed;
    }}
    </style>
    """
    st.markdown(bg_css, unsafe_allow_html=True)

# --- CSS Styling ---
st.markdown("""
<style>
    /* Hide all sidebar elements completely, including the expander button */
    [data-testid="stSidebar"],
    [data-testid="stSidebarNav"],
    [data-testid="collapsedControl"],
    [data-testid="stSidebar"][aria-expanded="true"],
    [data-testid="stSidebar"][aria-expanded="false"],
    [role="complementary"],
    [data-testid="stHeader"] .css-1dp5vir {
        display: none !important;
        visibility: hidden !important;
        position: absolute !important;
        transform: translateX(-100%) !important;
    }

    /* NEW: Image grid styling for search results */
    .image-results-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-bottom: 20px;
    }

    /* NEW: Image card styling */
    .image-card {
        background: white;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
    }

    .image-card:hover {
        transform: translateY(-5px);
    }

    .image-card img {
        width: 100%;
        height: 250px;
        object-fit: cover;
    }

    .image-caption {
        padding: 12px;
        text-align: center;
        font-weight: 600;
        color: #2c3e50;
    }

    /* NEW: Centered content for text and video results */
    .centered-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 100%;
    }
    /* Remove header padding and margin for full page coverage */
    .stApp > header {
        display: none !important;
    }

    /* Main container adjustments */
    .main {
        padding: 0 !important;
        margin: 0 !important;
        width: 100% !important;
        min-height: 100vh !important;
        background: transparent !important;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        overflow: auto !important;
    }

    /* UPDATED: Main header styling - brown color */
    .main-header {
        font-size: 3.5rem !important;
        color: #5D4037 !important;
        text-align: center;
        padding: 1.5rem 1rem;
        margin-top: 4rem;
        margin-bottom: 1.5rem;
        font-weight: 800;
        text-shadow: 2px 2px 8px rgba(255,255,255,0.7);
        white-space: nowrap;
        overflow: hidden;
        line-height: 1.2;
        letter-spacing: 1px;
        width: 100%;
        background-color: transparent !important;
        border-radius: 10px;
    }

    /* UPDATED: Page header styling for other pages - transparent background */
    .page-header {
        font-size: 2.5rem !important;
        color: #5D4037 !important;
        text-align: center;
        padding: 1rem;
        margin-top: 0.5rem;
        margin-bottom: 1rem;
        font-weight: 700;
        text-shadow: 2px 2px 6px rgba(255,255,255,0.7);
        width: 100%;
        background-color: transparent !important;
        border-radius: 10px;
    }

    /* UPDATED: Sub header styling - transparent background */
    .sub-header {
        font-size: 1.8rem !important;
        color: #5D4037 !important;
        text-align: center;
        padding: 0.5rem 1rem;
        margin-bottom: 1.5rem;
        font-weight: 600;
        width: 100%;
        background-color: transparent !important;
        border-radius: 10px;
        text-shadow: 1px 1px 4px rgba(255,255,255,0.7);
    }

    /* Category grid styling - all buttons in one line */
    .category-grid {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-bottom: 1.5rem;
        flex-wrap: nowrap;
        width: 100%;
        max-width: 900px;
    }

    /* Upload button container - centered below the 4 options */
    .upload-button-container {
        display: flex;
        justify-content: center;
        margin: 1rem 0;
        width: 100%;
    }
    
    /* UPDATED: Search bar styling - smaller and centered */
    .search-container {
        display: flex !important;;
        flex-direction: column !important;;
        align-items: center !important;;
        justify-content: center !important;;
        width: 60% !important;;
        max-width: 800px !important;;
        margin: 0 auto 0.5rem auto !important;;
        background-color: transparent !important;
        padding: 0 !important;
        box-shadow: none !important;
    }
        
    .search-container > div {
        display: flex !important;
        justify-content: center !important;
        width: 100% !important;
    }

    .search-container .stTextInput > div,
    .search-container .stSelectbox > div {
        width: 60% !important;
        margin: 0 auto !important;
        display: flex !important;
        justify-content: center !important;
    }
    div[data-testid="stTextInput"] label {
        font-size: 1.3rem !important;
        font-weight: 700 !important;
        color: #5D4037 !important;
        margin-bottom: 8px !important;
        display: flex !important;
        text-align: center !important;
        width: 100% !important;
        align-items: center !important;
        justify-content: center !important;
    }
    
    .search-container div[data-testid="stTextInput"] label,
    .search-container div[data-testid="stSelectbox"] label {
        font-size: 1.3rem !important;
        font-weight: 700 !important;
        color: #5D4037 !important;
        margin-bottom: 8px !important;
        display: flex !important;
        justify-content: center !important;
        align-items: center !important;
        width: 100% !important;
        text-align: center !important;
    }

    /* Content display styling - FIXED: Remove white background */
    .content-display {
        background-color: transparent !important;
        box-shadow: none !important;
        padding: 0 !important;
        margin: 0 auto 20px auto !important;
        width: 100%;
        max-width: 1000px;
    }

    /* UPDATED: Results container styling - transparent background */
    .results-container {
        padding: 20px;
        background-color: rgba(255, 255, 255, 0.85);
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        width: 100%;
        max-width: 1200px;
        margin: 0 auto 20px auto;
        max-height: 65vh;
        overflow-y: auto;
        position: relative;
        z-index: 1;
    }
            
    div[data-testid="stTextInput"] label,
    div[data-testid="stSelectbox"] label {
        font-size: 1.3rem !important;
        font-weight: 700 !important;
        color: #5D4037 !important;
        margin-bottom: 8px !important;
        display: flex !important;
        justify-content: center !important;
        align-items: center !important;
        width: 100% !important;
        text-align: center !important;
    }

    .search-container .stTextInput,
    .search-container .stSelectbox {
        display: flex !important;
        flex-direction: column !important;
        align-items: center !important;
        justify-content: center !important;
        width: 100% !important;
    }


    /* Ensure all content inside stays within the container */
    .results-container > div {
        max-width: 100%;
        overflow: hidden;
    }

    /* Fix for image display in results */
    .results-container .stImage {
        max-width: 100%;
    }

    /* Fix for video display in results */
    .results-container .stVideo {
        max-width: 100%;
    }

    /* Fix for text content in results */
    .results-container .text-content {
        max-width: 100%;
        overflow-wrap: break-word;
    }

    /* Custom scrollbars for content areas only */
    .results-container::-webkit-scrollbar {
        width: 8px;
    }

    .results-container::-webkit-scrollbar-track {
        background: rgba(0, 0, 0, 0.05);
        border-radius: 10px;
    }

    .results-container::-webkit-scrollbar-thumb {
        background: rgba(0, 0, 0, 0.2);
        border-radius: 10px;
    }

    .results-container::-webkit-scrollbar-thumb:hover {
        background: rgba(0, 0, 0, 0.3);
    }

    /* Hide any other streamlit elements */
    .stAlert,
    .stSpinner,
    .stException {
        display: none !important;
    }

    /* UPDATED: General button styling to ensure dark brown background and white text */
    .stButton > button,
    .category-button,
    .content-type-button,
    .back-button-style,
    .upload-button,
    .search-button,
    .st-eb,
    .st-ec,
    .st-ed,
    .stRadio > div > label,
    div[role="radiogroup"] label,
    button {
        background: linear-gradient(145deg, #5D4037 0%, #3e2723 100%) !important;
        color: white !important;
        font-weight: 600 !important;
        border-radius: 10px !important;
        border: none !important;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2) !important;
        transition: all 0.3s ease !important;
    }

    /* Button hover and active states */
    .stButton > button:hover,
    .stButton > button:active,
    .category-button:hover,
    .content-type-button:hover,
    .back-button-style:hover,
    .upload-button:hover,
    .search-button:hover,
    .st-eb[aria-checked="true"],
    .st-ec[aria-checked="true"],
    .st-ed[aria-checked="true"],
    .stRadio > div > label:hover,
    .stRadio > div > label[data-testid="stRadio"] {
        background: linear-gradient(145deg, #7C6656 0%, #A0836C 100%) !important;
        transform: translateY(-2px);
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
        color: white !important;
    }

    .stSelectbox [data-testid="stMarkdownContainer"] p {
        color: #5D4037 !important;
    }

    /* Dropdown menu background */
    .stSelectbox div[data-baseweb="select"] > div {
        background-color: #f5e8d3 !important;
        border-radius: 8px !important;
        border: 1px solid #5D4037 !important;
    }

    div[data-baseweb="popover"] {
        border: none !important;
        border-radius: 6px !important;
        overflow: hidden;
    }
    /* Dropdown options background */
    div[data-baseweb="popover"] div {
        background-color: #f5e8d3 !important;
        color: #5D4037 !important;
        border: none !important;
        box-shadow: none !important;
    }
    div[data-baseweb="popover"] div > div {
        border: none !important;
        box-shadow: none !important;
    }

    /* Dropdown hover effect */
    div[data-baseweb="popover"] div:hover {
        background-color: #e0d0b9 !important;
        border: none !important;  /* Ensure no border on hover */
    }

    /* Ensure text is visible in dropdown */
    .stSelectbox option {
        background-color: #f5e8d3 !important;
        color: #5D4037 !important;
    }
    div[data-baseweb="select"] > div {
        background-color: transparent !important;
        border: none !important;
        box-shadow: none !important;
        color: #4B2E05 !important; 
        border-radius: 6px !important;
        padding: 0.25rem 0.5rem !important;
        font-size: 1rem;
        width: 100%;
    }

    /* Style the actual select field */
    div[data-baseweb="select"] > div > div {
        border: none !important;
        background-color: transparent !important;
        box-shadow: none !important;
    }

    /* Remove focus outline and shadow */
    div[data-baseweb="select"] > div > div:focus {
        outline: none !important;
        box-shadow: 0 0 3px 1px rgba(139, 69, 19, 0.5) !important;
    }

    div[data-baseweb="select"] > div,
    div[data-baseweb="select"] > div > div,
    div[data-baseweb="select"] > div > div > div {
        border: none !important;
        background-color: transparent !important;
        box-shadow: none !important;
    }
    /* Make the actual dropdown box smaller */
    .search-container .stSelectbox select {
        height: 32px !important;     /* smaller height */
        font-size: 0.9rem !important;
        padding: 4px 10px !important;
        width: 100% !important;     /* fixed width */
        border-radius: 6px !important;
        border: none !important;
    }
            
    /* Specific button dimensions */
    .category-button {
        width: 140px !important;
        height: 70px !important;
        font-size: 1rem !important;
    }

    .content-type-button {
        width: 120px !important;
        height: 60px !important;
        font-size: 1rem !important;
    }

    /* UPDATED: Small button styling for back and search buttons */
    .small-button {
        width: 200px !important;
        height: 40px !important;
        font-size: 1rem !important;
    }

    /* UPDATED: Container for small buttons to be centered */
    .small-button-container {
        display: flex;
        justify-content: center;
        margin: 10px 0;
        width: 100%;
    }

    /* UPDATED: Back and Search button styles */
    .back-button-style, .search-button, .upload-button {
        width: 200px !important;
        height: 40px !important;
        font-size: 1rem !important;
        padding: 0 !important;
    }

    /* Column adjustments to ensure buttons stay in one line */
    .stColumn {
        flex: 1;
        min-width: 0;
    }

    /* Ensure content doesn't get cut off */
    .element-container {
        max-width: 100% !important;
    }

    /* Fix for any Streamlit containers that might cause overflow */
    .st-emotion-cache-1y4p8pa {
        width: 100% !important;
        max-width: 100% !important;
        padding: 0 1rem !important;
    }

    /* Custom container for the button grid */
    .button-grid-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
        margin-bottom: 1rem;
    }

    /* Hide the hamburger menu completely */
    .css-1vq4p4l {
        display: none !important;
    }

    /* Remove any potential scrollbars from the main page */
    .stAppViewContainer {
        overflow: auto !important;
    }

    /* Image grid styling */
    .image-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-bottom: 20px;
    }

    /* Text content styling */
    .text-content {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 15px;
        border-left: 4px solid #3498db;
    }

    /* Video container styling */
    .video-container {
        margin-bottom: 20px;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    /* UPDATED: Centered container for back button - smaller */
    .centered-button {
        display: flex;
        justify-content: center;
        margin-top: 15px;
        margin-bottom: 10px;
        background-color: transparent !important;
        padding: 5px 0 !important;
    }

    /* UPDATED: Radio button styling - dark brown with white text */
    .stRadio > div {
        flex-direction: row;
        display: flex;
        gap: 10px !important;
        justify-content: center;
        background-color: transparent !important;
        border: none !important;
        box-shadow: none !important;
        padding: 0 !important;
        margin: 0 !important;
    }

    .stRadio > div > label {
        background: linear-gradient(145deg, #5D4037 0%, #3e2723 100%) !important;
        color: white !important;
        padding: 8px 16px !important;
        border-radius: 10px;
        margin: 0 2px !important;
        cursor: pointer;
        transition: all 0.3s ease;
        border: none !important;
        height: auto !important;
        min-height: unset !important;
        font-weight: 600;
    }

    .stRadio > div > label:hover {
        background: linear-gradient(145deg, #3e2723 0%, #5D4037 100%) !important;
        transform: translateY(-2px);
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
        color: white !important;
    }

    .stRadio > div > label[data-testid="stRadio"] {
        background: linear-gradient(145deg, #3e2723 0%, #5D4037 100%) !important;
        color: white !important;
        font-weight: bold;
    }

    /* Remove white background from radio button container */
    div[data-testid="stRadio"] {
        background-color: transparent !important;
        border: none !important;
        box-shadow: none !important;
    }

    /* Fix for the radio button selection box */
    div[role="radiogroup"] {
        background-color: transparent !important;
        border: none !important;
        padding: 0 !important;
        margin: 0 !important;
        gap: 5px !important;
    }

    /* Custom styling for file uploader */
    .stFileUploader > div {
        background-color: rgba(255, 255, 255, 0.7) !important;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 15px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    }

    /* Custom styling for select boxes */
    .stSelectbox > div {
        background-color: #D2B48C !important;  /* light brown background */
        border: 1px solid #8B4513 !important;  /* brown border */
        box-shadow: 0 0 3px 1px rgba(139, 69, 19, 0.3) !important; /* subtle brown glow */
        border-radius: 6px !important;  /* rounded corners */
        padding: 8px 12px !important;  /* padding around input */
        max-width: 400px;
        margin: 0 auto !important;  /* center horizontally */
        display: block !important;
    }

    /* Fix for the content display area to remove extra white space */
    div[data-testid="stVerticalBlock"] > div:has(> div[data-testid="stRadio"]) {
        background-color: transparent !important;
        padding: 0 !important;
        margin: 0 !important;
    }

    /* Remove extra padding from radio button container */
    div.element-container:has(> div[data-testid="stRadio"]) {
        background-color: transparent !important;
        padding: 0 !important;
        margin: 0 0 5px 0 !important;
    }

    /* Light background for radio options */
    .st-eb, .st-ec, .st-ed {
        background: linear-gradient(145deg, #5D4037 0%, #3e2723 100%) !important;
        border-radius: 10px !important;
        padding: 5px 15px !important;
        margin: 2px !important;
        border: none !important;
        color: white !important;
        font-weight: 600 !important;
    }

    /* Selected radio option */
    .st-eb[aria-checked="true"], .st-ec[aria-checked="true"], .st-ed[aria-checked="true"] {
        background: linear-gradient(145deg, #3e2723 0%, #5D4037 100%) !important;
        font-weight: bold !important;
        color: white !important;
    }

    /* Remove the white box that appears below content */
    div[data-testid="stVerticalBlockBorderWrapper"]:has(> div > div[data-testid="stVerticalBlock"] > div[data-testid="element-container"]) {
        background-color: transparent !important;
        padding: 0 !important;
        margin: 0 !important;
    }

    /* Fix for results container to prevent white box issue */
    .stMarkdown:has(> .results-container) {
        background-color: transparent !important;
        padding: 0 !important;
        margin: 0 !important;
    }

    /* Ensure results container has proper z-index */
    .results-container {
        z-index: 10;
        position: relative;
    }

    /* Remove any white background from the main container */
    .block-container {
        background-color: transparent !important;
        padding: 0 !important;
        margin: 0 !important;
    }

    /* Fix for spacing after category buttons */
    .stButton button {
        margin: 2px !important;
        padding: 8px 12px !important;
    }

    /* Fix for spacing in content type selection */
    .stRadio > div {
        margin-bottom: 5px !important;
    }

    /* Remove extra padding from content display */
    .content-display .element-container {
        padding: 0 !important;
        margin: 0 !important;
    }

    /* Fix for spacing in search container */
    .search-container .stTextInput > div {
        background: white !important;
        padding: 8px 15px !important;
        margin: 0 auto !important;
        width: 60 !important;
        max-width: 500px; 
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

            
            
    /* Fix for vertical spacing in the content selection page */
    div[data-testid="stVerticalBlock"] {
        gap: 0.5rem !important;
    }

    /* Adjust the expander to fit within the container */
    .results-container .streamlit-expanderHeader {
        font-size: 1.2rem;
        color: #5D4037;
    }

    /* Adjust the column layout for images */
    .results-container .stColumn {
        flex: 0 0 48%;
        margin: 1%;
    }
            
    /* UPDATED: Warning message text color */
    .stWarning {
        color: #5D4037 !important;
    }

    /* UPDATED: Success message text color */
    .stSuccess {
        color: #5D4037 !important;
    }

    /* UPDATED: Error message text color */
    .stError {
        color: #5D4037 !important;
    }

    /* UPDATED: Info message text color */
    .stInfo {
        color: #5D4037 !important;
    }
    
    /* Image styling */
    .stImage > img {    
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 15px;
    }

    .stImage > div {
        text-align: center;
        font-weight: 600;
        color: #2c3e50;
        margin-top: 5px;
    }

    /* Fix for the white space below radio buttons */
    .content-display > div:has(> div[data-testid="stRadio"]) {
        background-color: transparent !important;
        padding: 0 !important;
        margin: 0 !important;
    }

    /* Target the specific container that holds the radio buttons */
    div[data-testid="stVerticalBlock"] > div > div[data-testid="stVerticalBlock"] > div[data-testid="element-container"]:has(div[data-testid="stRadio"]) {
        background-color: transparent !important;
        padding: 0 !important;
        margin: 0 !important;
        border: none !important;
        box-shadow: none !important;
    }

    /* Ensure the radio button group has no extra spacing */
    div[role="radiogroup"] {
        background-color: transparent !important;
        border: none !important;
        box-shadow: none !important;
    }

    /* Remove any extra spacing from the radio button labels */
    .stRadio > div > label {
        margin: 0 2px !important;
    }

    /* Ensure the content display area has proper spacing */
    .content-display > div {
        margin-bottom: 5px !important;
    }

    /* UPDATED: Search input label styling - bigger and bolder */
    .stTextInput label {
        font-size: 1.3rem !important;
        font-weight: 700 !important;
        color: #5D4037 !important;
        margin-bottom: 8px !important;
        display: block;
        text-align: center;
        width: 100%;
    }

    /* UPDATED: Search input field styling */
    .stTextInput input {
        font-size: 1rem !important;
        padding: 8px 12px !important;
        border-radius: 8px !important;
        border: 2px solid #5D4037 !important;
        color: #5D4037 !important;
        background-color: transparent !important;
        width: 60% !important;
        margin: 0 auto !important;
        display: block !important;
        height: 40px !important;
    }
            
    .stSelectbox select {
        border: none !important;
        background-color: transparent !important;
        box-shadow: none !important;
    }
            /* Remove focus styles that might show borders */
    div[data-baseweb="select"] > div:focus,
    div[data-baseweb="select"] > div > div:focus {
        border: none !important;
        box-shadow: none !important;
        outline: none !important;
    }

    /* UPDATED: Button container for search and back buttons */
    .button-row {
        display: flex;
        justify-content: center;
        gap: 15px;
        margin: 10px 0;
        width: 100%;
    }

    /* UPDATED: Small buttons for search and back */
    .small-button {
        width: 200px !important;
        height: 40px !important;
        font-size: 1rem !important;
        padding: 0 !important;
    }
        /* Reduce the white background size of the search bar */
    .search-container .stTextInput > div {
        background: transparent !important;  /* remove white */
        padding: 0 !important;               /* remove padding */
        margin: 0 auto !important;
        width: fit-content !important;       /* shrink to fit */
    }
            
     /* NEW: Brown placeholder for dropdown */
    .stSelectbox [data-testid="stMarkdownContainer"] p {
        color: #5D4037 !important;
    }

    div[data-baseweb="input"] {
        background-color: #D2B48C !important;  /* light brown background */
        border: 2px solid #8B4513 !important;  /* brown border */
        box-shadow: 0 0 5px 1px rgba(139, 69, 19, 0.4) !important; /* subtle brown glow */
        border-radius: 6px !important;  /* rounded corners */
        padding: 8px 12px !important;  /* padding around input */
        max-width: 400px;
        margin: 0 auto !important;  /* center horizontally */
        display: block !important;
    }
    /* Remove background, border, shadow from the base-input wrapper */
    div[data-baseweb="base-input"] {
        background-color: #D2B48C !important;  /* light brown background */
        border: 2px solid #8B4513 !important;  /* brown border */
        border-radius: 6px !important;
        padding: 0 !important;  /* no padding here */
        box-shadow: none !important;
    }

    /* Style the actual input field */
    div[data-baseweb="base-input"] > input {
        background-color: transparent !important;
        border: none !important;
        box-shadow: none !important;
        color:  #4B2E05 !important;  /* white text */
        padding: 0.25rem 0.5rem !important;
        font-size: 1rem;
        width: 100%;
    }
    /* Remove focus outline and shadow */
    div[data-baseweb="base-input"] > input:focus {
        outline: none !important;
        box-shadow: 0 0 5px 2px rgba(139, 69, 19, 0.7) !important;
    }
            
    /* Make the actual input box smaller */
    .search-container .stTextInput input {
        height: 32px !important;     /* smaller height */
        font-size: 0.9rem !important;
        padding: 4px 10px !important;
        width: 100% !important;     /* fixed width instead of 60% */
        border-radius: 6px !important;
        border: 1px solid #5D4037 !important;
    }
    .search-container .stTextInput label {
        font-size: 1.3rem !important;
        font-weight: 700 !important;
        color: #5D4037 !important;
        margin-bottom: 8px !important;
        display: flex !important;
        justify-content: center !important;
        align-items: center !important;
        width: 100% !important;
        text-align: center !important;
    }
        /* NEW: Center all content in results */
    .results-container .stImage,
    .results-container .stVideo,
    .results-container .stMarkdown {
        display: flex !important;
        justify-content: center !important;
        align-items: center !important;
        margin: 0 auto !important;
    }

    /* Center image content specifically */
    .results-container .stImage img {
        display: block !important;
        margin: 0 auto !important;
    }

    /* Center video content specifically */
    .results-container .stVideo video {
        display: block !important;
        margin: 0 auto !important;
    }

    /* Center text content specifically */
    .results-container .stMarkdown {
        text-align: center !important;
    }

    /* Ensure columns are centered */
    .results-container .stColumn {
        display: flex !important;
        justify-content: center !important;
        align-items: center !important;
    }
            
    
    /* NEW: Fix for radio button container to remove white box */
    div[data-testid="stVerticalBlock"] > div > div[data-testid="stVerticalBlock"] > div[data-testid="element-container"]:has(div[data-testid="stRadio"]) {
        background-color: transparent !important;
        padding: 0 !important;
        margin: 0 !important;
        border: none !important;
        box-shadow: none !important;
    }

    /* Ensure the radio button group has no background */
    div[role="radiogroup"] {
        background-color: transparent !important;
        border: none !important;
        box-shadow: none !important;
    }
                /* Force all button text to white */
    button, button span, .stRadio > div > label, .stRadio > div > label span {
        color: white !important;
    }
    
    /* Also target any divs or spans inside buttons or labels */
    button * {
        color: white !important;
    }
    .stRadio > div > label * {
        color: white !important;
    }


    /* Corrected: All buttons and labels inside buttons to have white text */
    button {
        color: white !important;
    }
        /* Add this rule to specifically target button text and ensure it's white */
    .stButton > button span,
    .category-button span,
    .content-type-button span,
    .back-button-style span,
    .upload-button span,
    .search-button span,
    .st-eb span,
    .st-ec span,
    .st-ed span,
    .stRadio > div > label span,
    div[role="radiogroup"] label span,
    button span {
        color: white !important;
    }

    /* Riddle Box Styling */
    .riddle-box {
        width: 92%;
        margin: 14px auto 18px auto;
        padding: 36px 28px;
        border: 3px solid #e6b800;
        background: #fff3b0;
        border-radius: 18px;
        font-size: 30px;
        line-height: 1.6;
        text-align: center;
        box-shadow: 4px 4px 14px rgba(0,0,0,0.12);
        color: #5D4037;
    }

    /* Answer box */
    .answer-box {
        width: 78%;
        margin: 8px auto 18px auto;
        padding: 16px 18px;
        border: 2px dashed #2f6b2f;
        background: #eef7ee;
        border-radius: 12px;
        font-size: 24px;
        text-align: center;
        font-weight: 700;
        color: #143d14;
    }  
</style>
""", unsafe_allow_html=True)

# --- Initialize session state ---
if 'current_category' not in st.session_state:
    st.session_state.current_category = None
if 'data_loaded' not in st.session_state:
    st.session_state.data_loaded = False
if 'cultural_data' not in st.session_state:
    st.session_state.cultural_data = None
if 'show_upload' not in st.session_state:
    st.session_state.show_upload = False
if 'content_page' not in st.session_state:
    st.session_state.content_page = False
if 'selected_content_type' not in st.session_state:
    st.session_state.selected_content_type = None
if 'search_query' not in st.session_state:
    st.session_state.search_query = ""
if 'show_results' not in st.session_state:
    st.session_state.show_results = False
if 'text_model' not in st.session_state:
    st.session_state.text_model = None
if 'text_vectorizer' not in st.session_state:
    st.session_state.text_vectorizer = None
if 'show_riddles' not in st.session_state:
    st.session_state.show_riddles = False
if 'riddle_index' not in st.session_state:
    st.session_state.riddle_index = 0
if 'show_riddle_answer' not in st.session_state:
    st.session_state.show_riddle_answer = False
if 'use_swecha_api' not in st.session_state:
    st.session_state.use_swecha_api = True
if 'show_api_status' not in st.session_state:
    st.session_state.show_api_status = False

# --- Riddles Data ---
riddles = [
    {"question": "‡∞é‡∞™‡±ç‡∞™‡±Å‡∞°‡±Ç ‡∞Æ‡∞æ‡∞ü‡∞æ‡∞°‡∞¶‡±Å, ‡∞ö‡±Ç‡∞™‡∞ø‡∞®‡∞™‡±ç‡∞™‡±Å‡∞°‡±á ‡∞Ö‡∞∞‡±ç‡∞•‡∞Æ‡∞µ‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞Ö‡∞¶‡±ç‡∞¶‡∞Ç"},
    {"question": "‡∞ö‡±Ü‡∞µ‡±Å‡∞≤‡±Å ‡∞≤‡±á‡∞µ‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞µ‡∞ø‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø; ‡∞®‡±ã‡∞∞‡±Å ‡∞≤‡±á‡∞®‡∞™‡±ç‡∞™‡∞ü‡∞ø‡∞ï‡±Ä ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞´‡±ã‡∞®‡±ç"},
    {"question": "‡∞®‡∞°‡∞µ‡∞¶‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞ä‡∞∞‡∞Ç‡∞§‡∞æ ‡∞ö‡±Ç‡∞™‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞™‡∞ü‡∞Ç (‡∞Æ‡±ç‡∞Ø‡∞æ‡∞™‡±ç)"},
    {"question": "‡∞§‡∞≤ ‡∞â‡∞Ç‡∞¶‡∞ø, ‡∞§‡±ã‡∞ï ‡∞â‡∞Ç‡∞¶‡∞ø; ‡∞∂‡∞∞‡±Ä‡∞∞‡∞Ç ‡∞≤‡±á‡∞¶‡±Å.", "answer": "‡∞®‡∞æ‡∞£‡±Ü‡∞Ç"},
    {"question": "‡∞ï‡∞≥‡±ç‡∞≤‡±Å‡∞®‡±ç‡∞®‡∞æ ‡∞ï‡∞®‡∞¨‡∞°‡∞¶‡±Å; ‡∞∞‡±Ü‡∞ï‡±ç‡∞ï‡∞≤‡±Å‡∞Ç‡∞°‡∞ø ‡∞é‡∞ó‡∞∞‡∞¶‡±Å.", "answer": "‡∞∏‡±Ç‡∞¶‡∞ø"},
    {"question": "‡∞®‡∞°‡∞µ‡∞¶‡±Å, ‡∞§‡∞ø‡∞∞‡±Å‡∞ó‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø; ‡∞ï‡∞æ‡∞≤‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞ö‡±Ç‡∞™‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ó‡∞°‡∞ø‡∞Ø‡∞æ‡∞∞‡∞Ç ‡∞∏‡±Ç‡∞¶‡∞ø"},
    {"question": "‡∞é‡∞Ç‡∞§ ‡∞§‡±Ä‡∞∏‡±ç‡∞§‡±á ‡∞Ö‡∞Ç‡∞§ ‡∞™‡±Ü‡∞∞‡±Å‡∞ó‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞∞‡∞Ç‡∞ß‡±ç‡∞∞‡∞Ç"},
    {"question": "‡∞®‡±Ä‡∞ü‡∞ø‡∞≤‡±ã ‡∞™‡±Å‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø, ‡∞®‡±Ä‡∞ü‡∞ø‡∞≤‡±ã‡∞®‡±á ‡∞ö‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞Ö‡∞≤ (‡∞§‡∞∞‡∞Ç‡∞ó‡∞Ç)"},
    {"question": "‡∞ó‡±Å‡∞Ç‡∞°‡±Ü ‡∞≤‡±á‡∞¶‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞ï‡±ä‡∞ü‡±ç‡∞ü‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ó‡∞°‡∞ø‡∞Ø‡∞æ‡∞∞‡∞Ç"},
    {"question": "‡∞®‡±Å‡∞µ‡±ç‡∞µ‡±Å ‡∞§‡±Ä‡∞∏‡±ç‡∞§‡±á ‡∞®‡∞æ‡∞ï‡±Å ‡∞™‡±Ü‡∞∞‡±Å‡∞ó‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞Ö‡∞™‡±ç‡∞™‡±Å / ‡∞ó‡±Å‡∞Ç‡∞§"},
    {"question": "‡∞é‡∞™‡±ç‡∞™‡±Å‡∞°‡±Ç ‡∞µ‡∞∏‡±ç‡∞§‡±Ç‡∞®‡±á ‡∞â‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø, ‡∞Ü‡∞ó‡∞¶‡±Å.", "answer": "‡∞∏‡∞Æ‡∞Ø‡∞Ç"},
    {"question": "‡∞∞‡±Ü‡∞ï‡±ç‡∞ï‡∞≤‡±Å ‡∞≤‡±á‡∞µ‡±Å, ‡∞é‡∞ó‡±Å‡∞∞‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø; ‡∞ï‡∞≥‡±ç‡∞≥‡±Å ‡∞≤‡±á‡∞µ‡±Å, ‡∞è‡∞°‡±Å‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞Æ‡±á‡∞ò‡∞Ç"},
    {"question": "‡∞§‡∞ø‡∞®‡∞ï‡∞™‡±ã‡∞§‡±á ‡∞ö‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø, ‡∞§‡∞ø‡∞Ç‡∞ü‡±á ‡∞¨‡∞§‡±Å‡∞ï‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞Ö‡∞ó‡±ç‡∞®‡∞ø"},
    {"question": "‡∞Æ‡±Ç‡∞∏‡∞ø‡∞®‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞Æ‡±å‡∞®‡∞Ç; ‡∞§‡±Ü‡∞∞‡∞ø‡∞ö‡∞ø‡∞®‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞™‡∞æ‡∞ü‡∞≤‡±Å.", "answer": "‡∞∞‡±á‡∞°‡∞ø‡∞Ø‡±ã"},
    {"question": "‡∞®‡∞®‡±ç‡∞®‡±Å ‡∞ï‡±ä‡∞°‡∞ø‡∞§‡±á‡∞®‡±á ‡∞®‡±á‡∞®‡±Å ‡∞™‡∞æ‡∞°‡±Å‡∞§‡∞æ‡∞®‡±Å.", "answer": "‡∞°‡±ç‡∞∞‡∞Æ‡±ç/‡∞°‡±ã‡∞≤‡±Å"},
    {"question": "‡∞™‡±Å‡∞ü‡±ç‡∞ü‡±Å‡∞ï‡∞§‡±ã ‡∞®‡∞≤‡±Å‡∞™‡±Å, ‡∞ï‡∞æ‡∞≤‡∞Ç‡∞§‡±ã ‡∞§‡±Ü‡∞≤‡±Å‡∞™‡∞µ‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞¨‡±ä‡∞ó‡±ç‡∞ó‡±Å‚Äî‡∞¨‡±Ç‡∞°‡∞ø‡∞¶"},
    {"question": "‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞¶‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞Ö‡∞∞‡±ç‡∞•‡∞Æ‡∞µ‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ï‡∞≥/‡∞ï‡∞≥‡±ç‡∞≥‡±Å"},
    {"question": "‡∞á‡∞≤‡±ç‡∞≤‡±Å ‡∞≤‡±á‡∞¶‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞Ö‡∞Ç‡∞¶‡∞∞‡∞ø‡∞®‡±Ä ‡∞ï‡∞™‡±ç‡∞™‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞Ü‡∞ï‡∞æ‡∞∂‡∞Ç"},
    {"question": "‡∞â‡∞Ç‡∞°‡∞¶‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞Ö‡∞®‡±Å‡∞≠‡∞µ‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞Ç.", "answer": "‡∞ó‡∞æ‡∞≤‡∞ø"},
    {"question": "‡∞®‡∞ø‡∞¶‡±ç‡∞∞‡∞™‡±ã‡∞¶‡±Å, ‡∞Ö‡∞Ø‡∞ø‡∞®‡∞æ ‡∞ï‡∞æ‡∞™‡∞æ‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ï‡∞≥‡±ç‡∞≥‡±Å"},
    {"question": "‡∞™‡∞¶‡∞æ‡∞≤‡±Å ‡∞ö‡±Ü‡∞™‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø ‡∞ï‡∞æ‡∞®‡±Ä ‡∞®‡±ã‡∞∞‡±Å ‡∞≤‡±á‡∞¶‡±Å.", "answer": "‡∞™‡±Å‡∞∏‡±ç‡∞§‡∞ï‡∞Ç"},
    {"question": "‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø ‡∞ï‡∞æ‡∞®‡±Ä ‡∞§‡∞≤‡±Å‡∞™‡±Å ‡∞§‡∞ü‡±ç‡∞ü‡∞¶‡±Å.", "answer": "‡∞ó‡∞æ‡∞≤‡∞ø"},
    {"question": "‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø‡∞µ‡±á‡∞≥ ‡∞™‡±Å‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø, ‡∞™‡∞ó‡∞≤‡±Å ‡∞ö‡∞ö‡±ç‡∞ö‡∞ø‡∞™‡±ã‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞®‡∞ï‡±ç‡∞∑‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡±Å/‡∞ö‡±Ä‡∞ï‡∞ü‡∞ø"},
    {"question": "‡∞™‡±Ü‡∞¶‡±ç‡∞¶‡∞¶‡∞ø ‡∞ï‡∞æ‡∞®‡±Ä ‡∞¨‡∞∞‡±Å‡∞µ‡±Å ‡∞≤‡±á‡∞¶‡±Å.", "answer": "‡∞®‡±Ä‡∞°"},
    {"question": "‡∞Ö‡∞¶‡±á ‡∞á‡∞Ç‡∞ü‡±ç‡∞≤‡±ã ‡∞™‡±Å‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø, ‡∞Ö‡∞¶‡±á ‡∞á‡∞Ç‡∞ü‡±ç‡∞≤‡±ã ‡∞ö‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ï‡±ä‡∞µ‡±ç‡∞µ‡±ä‡∞§‡±ç‡∞§‡∞ø"},
    {"question": "‡∞™‡∞∞‡±Å‡∞ó‡±Å‡∞≤‡±Å ‡∞§‡±Ä‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø ‡∞ï‡∞æ‡∞®‡±Ä ‡∞ï‡∞æ‡∞≥‡±ç‡∞≤‡±Å ‡∞≤‡±á‡∞µ‡±Å.", "answer": "‡∞®‡±Ä‡∞∞‡±Å"},
    {"question": "‡∞é‡∞Ç‡∞§ ‡∞§‡∞æ‡∞ó‡∞ø‡∞®‡∞æ ‡∞¶‡∞™‡±ç‡∞™‡∞ø‡∞ï ‡∞§‡±Ä‡∞∞‡±ç‡∞ö‡∞¶‡±Å.", "answer": "‡∞∏‡∞Æ‡±Å‡∞¶‡±ç‡∞∞‡∞Ç"},
    {"question": "‡∞Ü‡∞°‡∞ø‡∞§‡±á ‡∞Æ‡±ç‡∞∞‡±ã‡∞ó‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø, ‡∞®‡±ã‡∞∞‡±Å ‡∞≤‡±á‡∞¶‡±Å.", "answer": "‡∞°‡±ã‡∞≤‡±Å"},
    {"question": "‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø ‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø, ‡∞™‡∞ó‡∞≤‡±Å ‡∞™‡±ã‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ö‡±Ä‡∞ï‡∞ü‡∞ø"},
    {"question": "‡∞µ‡±Ü‡∞≥‡±ç‡∞≤‡∞¶‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞ä‡∞∞‡∞Ç‡∞§‡∞æ ‡∞§‡∞ø‡∞∞‡±Å‡∞ó‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞µ‡∞æ‡∞∞‡±ç‡∞§"},
    {"question": "‡∞â‡∞®‡±ç‡∞®‡∞¶‡∞ø ‡∞ö‡∞ø‡∞®‡±ç‡∞®‡∞¶‡∞ø, ‡∞ö‡±Ç‡∞™‡±á‡∞¶‡∞ø ‡∞™‡±Ü‡∞¶‡±ç‡∞¶‡∞¶‡∞ø.", "answer": "‡∞ï‡∞≥‡±ç‡∞≤‡∞ú‡±ã‡∞°‡±Å"},
    {"question": "‡∞®‡∞°‡∞µ‡∞¶‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞™‡∞æ‡∞¶‡∞Æ‡±Å‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞Æ‡∞Ç‡∞ö‡∞Ç ‡∞™‡∞æ‡∞¶‡∞Ç"},
    {"question": "‡∞â‡∞¶‡∞Ø‡∞Ç ‡∞™‡±Å‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø, ‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø ‡∞ö‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞∏‡±Ç‡∞∞‡±ç‡∞Ø‡∞ï‡∞æ‡∞Ç‡∞§‡∞ø"},
    {"question": "‡∞®‡∞™‡∞°‡∞¶‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞¶‡±Ü‡∞¨‡±ç‡∞¨‡∞ï‡±ä‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ó‡∞æ‡∞≤‡∞ø"},
    {"question": "‡∞Æ‡±Ç‡∞∏‡∞ø ‡∞â‡∞Ç‡∞ö‡∞ø‡∞§‡±á ‡∞∞‡∞π‡∞∏‡±ç‡∞Ø‡∞Ç; ‡∞§‡±Ü‡∞∞‡∞ø‡∞∏‡±ç‡∞§‡±á ‡∞ú‡±ç‡∞û‡∞æ‡∞®‡∞Ç.", "answer": "‡∞™‡±Å‡∞∏‡±ç‡∞§‡∞ï‡∞Ç"},
    {"question": "‡∞¶‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞ï‡±ã‡∞∏‡∞ø‡∞®‡∞æ ‡∞∞‡∞ï‡±ç‡∞§‡∞Ç ‡∞∞‡∞æ‡∞¶‡±Å.", "answer": "‡∞ö‡±Ü‡∞ü‡±ç‡∞ü‡±Å"},
    {"question": "‡∞é‡∞Ç‡∞§ ‡∞á‡∞∏‡±ç‡∞§‡±á ‡∞Ö‡∞Ç‡∞§ ‡∞™‡±Ü‡∞∞‡±Å‡∞ó‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞™‡±ç‡∞∞‡±á‡∞Æ"},
    {"question": "‡∞¶‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞™‡∞Ç‡∞ö‡∞ø‡∞§‡±á ‡∞§‡∞ó‡±ç‡∞ó‡∞¶‡±Å, ‡∞™‡±Ü‡∞∞‡±Å‡∞ó‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ú‡±ç‡∞û‡∞æ‡∞®‡∞Ç"},
    {"question": "‡∞ö‡±Å‡∞ü‡±ç‡∞ü‡±Ç ‡∞â‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø ‡∞ï‡∞æ‡∞®‡±Ä ‡∞ï‡∞®‡∞¨‡∞°‡∞¶‡±Å.", "answer": "‡∞ó‡∞æ‡∞≤‡∞ø"},
    {"question": "‡∞é‡∞µ‡∞∞‡∞ø ‡∞á‡∞Ç‡∞ü‡∞ø‡∞ï‡±à‡∞®‡∞æ ‡∞â‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞§‡∞≤‡±Å‡∞™‡±Å"},
    {"question": "‡∞µ‡∞Ç‡∞ó‡∞ø‡∞§‡±á ‡∞™‡±Ü‡∞∞‡±Å‡∞ó‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ú‡±ç‡∞û‡∞æ‡∞®‡∞Ç/‡∞µ‡∞ø‡∞®‡∞Ø‡∞Ç"},
    {"question": "‡∞™‡±Ü‡∞∞‡∞ø‡∞ó‡±á‡∞¶‡∞ø ‡∞µ‡∞Ø‡∞∏‡±Å, ‡∞§‡∞ó‡±ç‡∞ó‡∞¶‡±Å.", "answer": "‡∞µ‡∞Ø‡∞∏‡±ç‡∞∏‡±Å"},
    {"question": "‡∞¶‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞™‡∞ü‡±ç‡∞ü‡±Å‡∞ï‡±ã‡∞≤‡±á‡∞∞‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞Ö‡∞®‡±Å‡∞≠‡∞µ‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞Ç.", "answer": "‡∞∏‡∞Æ‡∞Ø‡∞Ç"},
    {"question": "‡∞™‡±Å‡∞°‡∞ø‡∞§‡±á ‡∞§‡∞≤, ‡∞ö‡∞®‡∞ø‡∞™‡±ã‡∞§‡±á ‡∞§‡±ã‡∞ï.", "answer": "‡∞¶‡±Ä‡∞™‡∞Ç"},
    {"question": "‡∞§‡∞ø‡∞®‡∞ï‡∞™‡±ã‡∞Ø‡∞ø‡∞®‡∞æ ‡∞ï‡∞∞‡∞ø‡∞ó‡∞ø‡∞™‡±ã‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ï‡±ä‡∞µ‡±ç‡∞µ‡±ä‡∞§‡±ç‡∞§‡∞ø"},
    {"question": "‡∞í‡∞ï‡∞∏‡∞æ‡∞∞‡∞ø ‡∞µ‡∞∏‡±ç‡∞§‡±á ‡∞µ‡±Ü‡∞®‡∞ï‡±ç‡∞ï‡∞ø ‡∞™‡±ã‡∞¶‡±Å.", "answer": "‡∞ï‡∞æ‡∞≤‡∞Ç"},
    {"question": "‡∞Æ‡±ç‡∞∞‡±ã‡∞ó‡±Å‡∞§‡±Å‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø ‡∞ï‡∞æ‡∞®‡±Ä ‡∞®‡±ã‡∞∞‡±Å ‡∞≤‡±á‡∞¶‡±Å.", "answer": "‡∞ó‡∞Ç‡∞ü"},
    {"question": "‡∞¶‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞µ‡∞ø‡∞∞‡∞ø‡∞∏‡±ç‡∞§‡±á ‡∞µ‡∞æ‡∞∏‡∞® ‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞Æ‡∞≤‡±ç‡∞≤‡±Ü ‡∞™‡±Å‡∞µ‡±ç‡∞µ‡±Å"},
    {"question": "‡∞¶‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞§‡∞æ‡∞ó‡∞ø‡∞§‡±á ‡∞™‡±ç‡∞∞‡§Æ‡∞æ‡∞¶‡∞Ç ‡∞â‡∞Ç‡∞°‡±ä‡∞ö‡±ç‡∞ö‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞≤‡±ã‡∞™‡∞≤ ‡∞™‡±ç‡∞∞‡∞æ‡∞£‡∞Ç.", "answer": "‡∞®‡±Ä‡∞∞‡±Å"},
    {"question": "‡∞®‡∞°‡∞µ‡∞¶‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞µ‡∞æ‡∞π‡∞®‡∞Ç ‡∞ï‡∞¶‡∞ø‡∞≤‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ö‡∞ï‡±ç‡∞∞‡∞Ç"},
    {"question": "‡∞ö‡∞æ‡∞≤‡∞æ ‡∞§‡∞ø‡∞®‡±ç‡∞®‡∞æ ‡∞é‡∞™‡±ç‡∞™‡±Å‡∞°‡±Ç ‡∞Ü‡∞ï‡∞≤‡±á ‡∞â‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞Ö‡∞ó‡±ç‡∞®‡∞ø"},
    {"question": "‡∞é‡∞µ‡∞∞‡±Å ‡∞á‡∞ö‡±ç‡∞ö‡∞ø‡∞®‡∞æ ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞≠‡±Ç‡∞Æ‡∞ø (‡∞â‡∞™‡∞Æ‡∞æ)"},
    {"question": "‡∞¶‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞ï‡∞°‡∞ø‡∞ó‡∞ø‡∞§‡±á ‡∞Æ‡∞∞‡∞ø‡∞Ç‡∞§ ‡∞Æ‡±Å‡∞∞‡∞ø‡∞ï‡∞ø ‡∞Ö‡∞µ‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞®‡±Ä‡∞∞‡±Å (‡∞Æ‡±Å‡∞∞‡∞ø‡∞ï‡∞ø ‡∞®‡±Ä‡∞∞‡±Å)"},
    {"question": "‡∞â‡∞®‡±ç‡∞®‡∞æ ‡∞ï‡∞®‡∞¨‡∞°‡∞¶‡±Å; ‡∞≤‡±á‡∞ï‡±Å‡∞Ç‡∞ü‡±á ‡∞ú‡±Ä‡∞µ‡∞Ç ‡∞â‡∞Ç‡∞°‡∞¶‡±Å.", "answer": "‡∞ó‡∞æ‡∞≤‡∞ø"},
    {"question": "‡∞Æ‡∞Ç‡∞ö‡∞Ç ‡∞Æ‡±Ä‡∞¶ ‡∞™‡∞°‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø, ‡∞ï‡∞æ‡∞®‡±Ä ‡∞®‡∞ø‡∞¶‡±ç‡∞∞‡∞™‡±ã‡∞¶‡±Å.", "answer": "‡∞§‡∞≤‡∞ó‡∞°/‡∞™‡∞§‡±ç‡∞∞‡∞Ç"},
    {"question": "‡∞ï‡∞®‡±ç‡∞®‡±Ä‡∞≥‡±ç‡∞≤‡±Å ‡∞µ‡∞∏‡±ç‡∞§‡∞æ‡∞Ø‡∞ø ‡∞ï‡∞æ‡∞®‡±Ä ‡∞ï‡∞≥‡±ç‡∞≥‡±Å ‡∞≤‡±á‡∞µ‡±Å.", "answer": "‡∞Æ‡±á‡∞ò‡∞æ‡∞≤‡±Å/‡∞µ‡∞∞‡±ç‡∞∑‡∞Ç"},
    {"question": "‡∞Ü‡∞ï‡∞æ‡∞∂‡∞Ç ‡∞™‡±ç‡∞∞‡∞§‡∞ø‡∞∞‡±ã‡∞ú‡±Ç ‡∞∞‡∞Ç‡∞ó‡±Å ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞â‡∞¶‡∞Ø‡∞Ç/‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞ ‡∞Ü‡∞ï‡∞æ‡∞∂‡∞Ç"},
    {"question": "‡∞Ö‡∞¶‡±á ‡∞ö‡±ã‡∞ü‡±Å ‡∞®‡±Å‡∞Ç‡∞ö‡±á ‡∞™‡±ç‡∞∞‡∞™‡∞Ç‡∞ö‡∞Ç ‡∞ö‡±Ç‡∞™‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ü‡±Ä‡∞µ‡±Ä"},
    {"question": "‡∞®‡∞°‡∞µ‡∞¶‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞æ‡∞£‡∞Ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞¨‡±ã‡∞ü‡±Å"},
    {"question": "‡∞µ‡∞∞‡±ç‡∞∑‡∞Ç ‡∞∞‡∞æ‡∞ï‡∞™‡±ã‡∞Ø‡∞ø‡∞®‡∞æ ‡∞ï‡±Å‡∞∞‡±Å‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ï‡∞®‡±ç‡∞®‡±Ä‡∞≥‡±ç‡∞≤‡±Å"},
    {"question": "‡∞§‡∞ø‡∞®‡∞ï‡∞™‡±ã‡∞Ø‡∞ø‡∞®‡∞æ ‡∞§‡∞ø‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞§‡±Å‡∞™‡∞æ‡∞ï‡±Ä ‡∞ó‡±Å‡∞≥‡±ç‡∞≤‡±Å (‡∞Æ‡∞æ‡∞ü‡∞≤ ‡∞Ü‡∞ü)"},
    {"question": "‡∞Æ‡∞Ç‡∞ü ‡∞≤‡±á‡∞ï‡∞™‡±ã‡∞Ø‡∞ø‡∞®‡∞æ ‡∞ï‡∞æ‡∞≤‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ï‡∞æ‡∞∞‡∞Ç/‡∞Æ‡∞®‡∞∏‡±Å"},
    {"question": "‡∞§‡∞®‡∞ï‡∞ø ‡∞é‡∞Æ‡±Å‡∞ï‡∞≤‡±Å ‡∞≤‡±á‡∞µ‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞®‡∞ø‡∞≤‡∞¨‡±Ü‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ö‡±Ü‡∞ü‡±ç‡∞ü‡±Å ‡∞ï‡∞æ‡∞Ç‡∞°‡∞Ç"},
    {"question": "‡∞í‡∞ï ‡∞®‡∞¶‡∞ø ‡∞≤‡∞æ‡∞Ç‡∞ü‡∞ø‡∞¶‡∞ø ‡∞ï‡∞æ‡∞®‡±Ä ‡∞®‡±Ä‡∞∞‡±Å ‡∞≤‡±á‡∞¶‡±Å.", "answer": "‡∞∞‡±ã‡∞°‡±ç‡∞°‡±Å"},
    {"question": "‡∞™‡∞æ‡∞≤‡±Å ‡∞á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø ‡∞ï‡∞æ‡∞®‡±Ä ‡∞ú‡∞Ç‡∞§‡±Å‡∞µ‡±Å ‡∞ï‡∞æ‡∞¶‡±Å.", "answer": "‡∞ï‡±ä‡∞¨‡±ç‡∞¨‡∞∞‡∞ø‡∞ï‡∞æ‡∞Ø"},
    {"question": "‡∞é‡∞™‡±ç‡∞™‡±Å‡∞°‡±Ç ‡∞µ‡±Ü‡∞®‡∞ï‡±á ‡∞â‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø ‡∞ï‡∞æ‡∞®‡±Ä ‡∞§‡∞æ‡∞ï‡∞≤‡±á‡∞Ç.", "answer": "‡∞®‡±Ä‡∞°"},
    {"question": "‡∞Æ‡±Å‡∞ï‡±ç‡∞ï‡±Å ‡∞â‡∞Ç‡∞¶‡∞ø ‡∞ï‡∞æ‡∞®‡∞ø ‡∞µ‡∞æ‡∞∏‡∞® ‡∞ö‡±Ç‡∞°‡∞¶‡±Å.", "answer": "‡∞∞‡±à‡∞≤‡±Å"},
    {"question": "‡∞í‡∞ï ‡∞á‡∞≤‡±ç‡∞≤‡±Å ‡∞â‡∞Ç‡∞¶‡∞ø, ‡∞§‡∞≤‡±Å‡∞™‡±Å‡∞≤‡±á ‡∞≤‡±á‡∞µ‡±Å.", "answer": "‡∞ó‡±Å‡∞°‡±ç‡∞°‡±Å"},
    {"question": "‡∞é‡∞ó‡∞∞‡∞¶‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞™‡±à‡∞ï‡±á ‡∞™‡±ã‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞™‡±ä‡∞ó"},
    {"question": "‡∞µ‡∞æ‡∞® ‡∞µ‡∞∏‡±ç‡∞§‡±á ‡∞™‡±Å‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø, ‡∞µ‡∞æ‡∞® ‡∞™‡±ã‡∞Ø‡∞ø‡∞§‡±á ‡∞™‡±ã‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø ‡∞µ‡∞æ‡∞∏‡∞®"},
    {"question": "‡∞ö‡∞ø‡∞®‡±ç‡∞®‡∞¶‡±á ‡∞ï‡∞æ‡∞®‡±Ä ‡∞™‡±Ü‡∞¶‡±ç‡∞¶‡∞¶‡∞ø ‡∞ö‡±Ç‡∞™‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞¶‡∞∞‡±ç‡∞™‡∞£‡∞Ç/‡∞≤‡±Ü‡∞®‡±ç‡∞∏‡±ç"},
    {"question": "‡∞®‡∞°‡∞µ‡∞¶‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞¶‡±Ç‡∞∞‡∞Ç ‡∞ö‡±Ç‡∞™‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞Æ‡±ç‡∞Ø‡∞æ‡∞™‡±ç"},
    {"question": "‡∞é‡∞™‡±ç‡∞™‡±Å‡∞°‡±Ç ‡∞™‡±Ü‡∞∞‡±Å‡∞ó‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø, ‡∞§‡∞ó‡±ç‡∞ó‡∞¶‡±Å.", "answer": "‡∞µ‡∞Ø‡∞∏‡±ç‡∞∏‡±Å"},
    {"question": "‡∞ö‡±Ü‡∞ü‡±ç‡∞ü‡±Å ‡∞ï‡∞æ‡∞¶‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞®‡±Ä‡∞° ‡∞á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞á‡∞≤‡±ç‡∞≤‡±Å/‡∞∑‡±Ü‡∞°‡±ç"},
    {"question": "‡∞ï‡∞∞‡±ç‡∞∞‡∞≤‡∞æ‡∞Ç‡∞ü‡∞ø‡∞¶‡∞ø ‡∞ï‡∞æ‡∞®‡±Ä ‡∞µ‡±Ü‡∞≤‡±Å‡∞§‡±Å‡∞∞‡±Å ‡∞á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞Æ‡±Ü‡∞µ‡±ç‡∞µ‡∞§‡±ç‡∞§‡∞ø"},
    {"question": "‡∞™‡∞∞‡±Å‡∞ó‡±Ü‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø ‡∞ï‡∞æ‡∞®‡±Ä ‡∞ä‡∞™‡∞ø‡∞∞‡∞ø ‡∞™‡±Ä‡∞≤‡±ç‡∞ö‡∞¶‡±Å.", "answer": "‡∞∞‡±à‡∞≤‡±Å"},
    {"question": "‡∞í‡∞ï‡∞ü‡∞ø ‡∞™‡±Å‡∞°‡∞ø‡∞§‡±á ‡∞Æ‡∞∞‡±ä‡∞ï‡∞ü‡∞ø ‡∞ö‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞™‡∞ó‡∞≤‡±Å - ‡∞∞‡∞æ‡∞§‡±ç‡∞∞‡∞ø"},
    {"question": "‡∞µ‡±Ü‡∞≤‡±Å‡∞§‡±Å‡∞∞‡±Å ‡∞≤‡±á‡∞ï‡∞™‡±ã‡∞§‡±á‡∞®‡±á ‡∞â‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞®‡±Ä‡∞°"},
    {"question": "‡∞ó‡±Å‡∞Ç‡∞°‡±ç‡∞∞‡∞Ç‡∞ó‡∞æ ‡∞§‡∞ø‡∞∞‡±Å‡∞ó‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø ‡∞ï‡∞æ‡∞®‡±Ä ‡∞é‡∞ï‡±ç‡∞ï‡∞°‡∞ø‡∞ï‡±Ä ‡∞™‡±ã‡∞¶‡±Å.", "answer": "‡∞ó‡∞°‡∞ø‡∞Ø‡∞æ‡∞∞‡∞Ç ‡∞∏‡±Ç‡∞¶‡∞ø"},
    {"question": "‡∞®‡±ã‡∞∞‡±Å ‡∞≤‡±á‡∞®‡∞ø‡∞¶‡∞ø ‡∞ï‡∞æ‡∞®‡±Ä ‡∞Æ‡∞æ‡∞ü‡∞≤‡∞æ‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞∞‡±á‡∞°‡∞ø‡∞Ø‡±ã/‡§ü‡±á‡∞™‡±ç"},
    {"question": "‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞¶‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞§‡∞ø‡∞∞‡∞ø‡∞ó‡∞ø ‡∞ö‡±Ü‡∞¨‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞™‡±ç‡∞∞‡∞§‡∞ø‡∞ß‡±ç‡∞µ‡∞®‡∞ø"},
    {"question": "‡∞§‡∞≤ ‡∞â‡∞Ç‡∞¶‡∞ø ‡∞ï‡∞æ‡∞®‡±Ä ‡∞ú‡±Å‡∞ü‡±ç‡∞ü‡±Å ‡∞≤‡±á‡∞¶‡±Å.", "answer": "‡∞ó‡±Å‡∞°‡±ç‡∞°‡±Å/‡∞¨‡∞Ç‡∞ó‡∞æ‡∞≥‡∞æ‡∞¶‡±Å‡∞Ç‡∞™"},
    {"question": "‡∞®‡∞°‡∞µ‡∞¶‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞™‡∞æ‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ü‡±á‡∞™‡±ç ‡∞∞‡∞ø‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡∞∞‡±ç"},
    {"question": "‡∞™‡∞≤‡±Å‡∞ï‡±Å‡∞≤‡±Å ‡∞ö‡±Ü‡∞™‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø ‡∞ï‡∞æ‡∞®‡±Ä ‡∞ú‡±Ä‡∞µ‡∞Ç ‡∞≤‡±á‡∞¶‡±Å.", "answer": "‡∞™‡±Å‡∞∏‡±ç‡∞§‡∞ï‡∞Ç"},
    {"question": "‡∞Ö‡∞®‡±ç‡∞®‡∞Ç ‡∞§‡∞ø‡∞®‡∞¶‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞µ‡∞Ç‡∞°‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞∏‡±ç‡∞ü‡±å‡∞µ‡±ç"},
    {"question": "‡∞§‡∞ø‡∞®‡∞≤‡±á‡∞Ç ‡∞ï‡∞æ‡∞®‡±Ä ‡∞§‡∞ø‡∞®‡∞ø‡∞™‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞°‡∞¨‡±ç‡∞¨‡±Å"},
    {"question": "‡∞∞‡±Ü‡∞ï‡±ç‡∞ï‡∞≤‡±Å ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞Ø‡∞ø ‡∞ï‡∞æ‡∞®‡±Ä ‡∞é‡∞ó‡∞∞‡∞¶‡±Å.", "answer": "‡∞§‡∞≤‡±Å‡∞™‡±Å"},
    {"question": "‡∞Ü‡∞ó‡∞¶‡±Å ‡∞ï‡∞æ‡∞®‡±Ä ‡∞®‡∞°‡±Å‡∞∏‡±ç‡∞§‡±Ç‡∞®‡±á ‡∞â‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ï‡∞æ‡∞≤‡∞Ç"},
    {"question": "‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø ‡∞ï‡∞æ‡∞®‡±Ä ‡∞¶‡±Å‡∞∏‡±ç‡∞§‡±Å‡∞≤‡±Å ‡∞µ‡±á‡∞∏‡±Å‡∞ï‡±ã‡∞¶‡±Å.", "answer": "‡∞ó‡∞æ‡∞≤‡∞ø"},
    {"question": "‡∞á‡∞Ç‡∞ü‡±ç‡∞≤‡±ã ‡∞â‡∞®‡±ç‡∞®‡∞æ ‡∞¨‡∞Ø‡∞ü ‡∞ï‡∞®‡∞ø‡∞™‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ï‡∞ø‡∞ü‡∞ø‡∞ï‡±Ä"},
    {"question": "‡∞ö‡∞ø‡∞®‡±ç‡∞®‡∞¶‡±á ‡∞ï‡∞æ‡∞®‡±Ä ‡∞¨‡∞≤‡∞Æ‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞∏‡±Ç‡∞¶‡∞ø"},
    {"question": "‡∞™‡±Å‡∞ü‡±ç‡∞ü‡∞ø‡∞Ç‡∞¶‡∞ø ‡∞®‡∞≤‡±ç‡∞≤‡∞ó‡∞æ, ‡∞ö‡∞®‡∞ø‡∞™‡±ã‡∞Ø‡∞ø‡∞Ç‡∞¶‡∞ø ‡∞§‡±Ü‡∞≤‡±ç‡∞≤‡∞ó‡∞æ.", "answer": "‡∞¨‡±ä‡∞ó‡±ç‡∞ó‡±Å - ‡∞¨‡±Ç‡∞°‡∞ø‡∞¶"},
    {"question": "‡∞®‡±Ä‡∞∞‡±Å ‡∞§‡∞æ‡∞ó‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø ‡∞ï‡∞æ‡∞®‡±Ä ‡∞¶‡∞æ‡∞π‡∞Ç ‡∞§‡±Ä‡∞∞‡∞¶‡±Å.", "answer": "‡∞≠‡±Ç‡∞Æ‡∞ø"},
    {"question": "‡∞ö‡∞®‡∞ø‡∞™‡±ã‡∞Ø‡∞ø‡∞®‡∞æ ‡§®‡∞ø‡∞≤‡∞ø‡∞ö‡∞ø ‡∞â‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ö‡±Ü‡∞ü‡±ç‡∞ü‡±Å"},
    {"question": "‡∞é‡∞Ç‡∞§ ‡∞ï‡±ä‡∞ü‡±ç‡∞ü‡∞ø‡∞®‡∞æ ‡∞è‡∞°‡∞µ‡∞¶‡±Å.", "answer": "‡∞°‡±ç‡∞∞‡∞Æ‡±ç"},
    {"question": "‡∞®‡∞¶‡∞ø ‡∞¶‡∞æ‡∞ü‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø, ‡∞§‡∞°‡∞µ‡∞¶‡±Å.", "answer": "‡∞µ‡∞Ç‡∞§‡±Ü‡∞® ‡∞®‡±Ä‡∞°"},
    {"question": "‡∞®‡∞®‡±ç‡∞®‡±Å ‡∞™‡∞ó‡∞≤‡∞ó‡±ä‡∞°‡∞§‡∞æ‡∞∞‡±Å, ‡∞§‡±ç‡∞∞‡∞æ‡∞ó‡±Å‡∞§‡∞æ‡∞∞‡±Å.", "answer": "‡∞ï‡±ä‡∞¨‡±ç‡∞¨‡∞∞‡∞ø"},
    {"question": "‡∞ó‡±Å‡∞°‡±ç‡∞°‡∞§‡±ã ‡∞ï‡∞™‡±ç‡∞™‡∞ø‡∞§‡±á‡∞®‡±á ‡∞ö‡±Ç‡∞∏‡±ç‡∞§‡∞æ‡∞∞‡±Å.", "answer": "‡∞∏‡∞ø‡∞®‡∞ø‡∞Æ‡∞æ ‡∞§‡±Ü‡∞∞"},
    {"question": "‡∞™‡∞≤‡∞ï‡∞≤‡±Å ‡∞â‡∞®‡±ç‡∞®‡∞æ ‡∞™‡∞°‡±Å‡∞ï‡±ã‡∞¶‡±Å.", "answer": "‡∞™‡±Å‡∞∏‡±ç‡∞§‡∞ï‡∞Ç"},
    {"question": "‡∞ï‡±ä‡∞°‡∞ø‡∞§‡±á‡∞®‡±á ‡∞™‡∞æ‡∞ü ‡∞™‡∞æ‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞Æ‡±É‡∞¶‡∞Ç‡∞ó‡∞Ç/‡∞°‡∞™‡±ç‡∞™‡±Å"},
    {"question": "‡∞¶‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞®‡±Ä‡∞≥‡±ç‡∞≤‡±Å ‡∞á‡∞∏‡±ç‡∞§‡±á ‡∞ö‡∞ø‡∞®‡±ç‡∞®‡∞¶‡∞µ‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞â‡∞™‡±ç‡∞™‡±Å/‡∞ö‡∞ï‡±ç‡∞ï‡±Ü‡∞∞"},
    {"question": "‡∞ö‡∞ø‡∞®‡±ç‡∞® ‡∞Æ‡±ä‡∞® ‡∞™‡±Ü‡∞¶‡±ç‡∞¶ ‡∞™‡∞®‡∞ø.", "answer": "‡∞™‡±Ü‡∞®‡±ç/‡∞™‡±Ü‡∞®‡±ç‡∞∏‡∞ø‡∞≤‡±ç"},
    {"question": "‡∞™‡±ã‡∞Ø‡±á‡∞ï‡±ä‡∞¶‡±ç‡∞¶‡±Ä ‡∞™‡±ä‡∞≤‡±Å‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞™‡±Ü‡∞®‡±ç‡∞∏‡∞ø‡∞≤‡±ç"},
    {"question": "‡∞ï‡∞™‡±ç‡∞™‡±Å‡∞ï‡±Å‡∞Ç‡∞ü‡±á ‡∞ö‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ï‡∞æ‡∞ó‡∞ø‡∞§‡∞Ç"},
    {"question": "‡∞®‡±Ä‡∞≥‡±ç‡∞≤‡∞ï‡∞ø‡∞Ç‡∞¶ ‡∞™‡±Å‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø; ‡∞®‡±á‡∞≤‡∞™‡±à ‡∞ö‡∞®‡∞ø‡∞™‡±ã‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞¨‡±Å‡∞°‡∞ó"},
    {"question": "‡∞é‡∞ï‡±ç‡∞ï‡∞°‡∞ø‡∞ï‡∞ø ‡∞µ‡±Ü‡∞≥‡±ç‡∞≤‡∞ø‡∞®‡∞æ ‡∞™‡∞ï‡±ç‡∞ï‡∞®‡±á ‡∞â‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞®‡±Ä‡∞°"},
    {"question": "‡∞®‡±Å‡∞µ‡±ç‡∞µ‡±Å ‡∞™‡∞æ‡∞ü ‡∞™‡∞æ‡∞°‡∞ø‡∞§‡±á ‡∞á‡∞¶‡∞ø ‡∞®‡∞æ‡∞ü‡±ç‡∞Ø‡∞Ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞®‡±Ä‡∞°"},
    {"question": "‡∞™‡±ä‡∞ü‡±ç‡∞ü‡∞≤‡±ã ‡∞™‡∞æ‡∞≤‡±Å, ‡∞µ‡±Ü‡∞≤‡±Å‡∞™‡∞≤ ‡∞¶‡±Å‡∞∏‡±ç‡∞§‡±Å‡∞≤‡±Å.", "answer": "‡∞ï‡±ä‡∞¨‡±ç‡∞¨‡∞∞‡∞ø‡∞ï‡∞æ‡∞Ø"},
    {"question": "‡∞µ‡∞æ‡∞® ‡∞™‡∞°‡∞ø‡∞§‡±á‡∞®‡±á ‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø, ‡∞§‡∞°‡∞µ‡∞¶‡±Å.", "answer": "‡∞á‡∞Ç‡∞¶‡±ç‡∞∞‡∞ß‡∞®‡±Å‡∞∏‡±ç‡∞∏‡±Å"},
    {"question": "‡∞Æ‡∞æ‡∞Æ‡∞ø‡∞°‡∞ø ‡∞ö‡±Ü‡∞ü‡±ç‡∞ü‡±Å‡∞™‡±à ‡∞ï‡∞æ‡∞ï‡∞ø ‡∞ï‡±Ç‡∞∏‡±ç‡∞§‡±á ‡∞è‡∞Ç ‡∞™‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø?", "answer": "‡∞ï‡∞æ‡∞ï‡∞ø ‡∞®‡±Ä‡∞°"},
    {"question": "‡∞é‡∞ï‡±ç‡∞ï‡∞ø‡∞Ç‡∞ö‡∞æ‡∞ï‡±á ‡∞¶‡∞ø‡∞ó‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞≤‡∞ø‡∞´‡±ç‡∞ü‡±ç"},
    {"question": "‡∞§‡∞≤‡∞Ç‡∞ü‡±Ä ‡∞≤‡±á‡∞ï‡∞™‡±ã‡∞Ø‡∞ø‡∞®‡∞æ ‡∞ß‡∞∞‡∞ø‡∞Ç‡∞ö‡±á‡∞µ‡∞æ‡∞∞‡±Å.", "answer": "‡∞â‡∞Ç‡∞ó‡∞∞‡∞Ç"},
    {"question": "‡∞é‡∞Ç‡∞°‡∞≤‡±ã ‡∞ö‡∞ö‡±ç‡∞ö‡∞ø‡∞™‡±ã‡∞§‡±Å‡∞Ç‡∞¶‡∞ø; ‡∞®‡±Ä‡∞ü‡∞ø‡∞≤‡±ã ‡∞¨‡∞§‡±Å‡∞ï‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ö‡±á‡∞™"},
    {"question": "‡∞é‡∞™‡±ç‡∞™‡±Å‡∞°‡±Ç ‡∞™‡∞°‡±Å‡∞ï‡±Å‡∞®‡∞ø ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞™‡±Å‡∞∏‡±ç‡∞§‡∞ï‡∞Ç"},
    {"question": "‡∞é‡∞ï‡±ç‡∞ï‡∞° ‡∞™‡±Ü‡∞ü‡±ç‡∞ü‡∞ø‡∞®‡∞æ ‡∞∏‡∞∞‡∞ø‡∞™‡±ã‡∞Ø‡±á ‡∞á‡∞≤‡±ç‡∞≤‡±Å.", "answer": "‡∞§‡∞æ‡∞¨‡±á‡∞≤‡±Å ‡∞ï‡∞µ‡∞ö‡∞Ç"},
    {"question": "‡∞§‡∞≤ ‡∞≤‡±á‡∞¶‡±Å; ‡∞Ö‡∞Ø‡∞ø‡∞®‡∞æ ‡∞ï‡∞ø‡∞∞‡±Ä‡∞ü‡∞Ç ‡∞â‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞Ö‡∞®‡∞æ‡∞∏‡∞™‡∞Ç‡∞°‡±Å"},
    {"question": "‡∞µ‡∞æ‡∞°‡∞ø‡∞§‡±á ‡∞ï‡±Å‡∞¶‡±Å‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø; ‡∞ï‡±Å‡∞¶‡∞ø‡∞∏‡±ç‡∞§‡±á ‡∞µ‡∞æ‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞¨‡∞ü‡±ç‡∞ü"},
    {"question": "‡∞ó‡∞æ‡∞≤‡∞ø ‡∞≤‡±á‡∞ï ‡∞ï‡∞¶‡∞≤‡∞¶‡±Å; ‡∞ó‡∞æ‡∞≤‡∞ø ‡∞é‡∞ï‡±ç‡∞ï‡±Å‡∞µ‡±à‡∞§‡±á ‡∞é‡∞ó‡±Å‡∞∞‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞ó‡∞æ‡∞≤‡∞ø‡∞™‡∞ü‡∞Ç"},
    {"question": "‡∞í‡∞ï‡±ç‡∞ï ‡∞Ö‡∞°‡±Å‡∞ó‡±Å‡∞§‡±ã ‡∞™‡±ç‡∞∞‡∞™‡∞Ç‡∞ö‡∞Ç ‡∞ö‡±Å‡∞ü‡±ç‡∞ü‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.", "answer": "‡∞µ‡∞æ‡∞∞‡±ç‡∞§/‡∞á‡∞Ç‡∞ü‡∞∞‡±ç‡∞®‡±Ü‡∞ü‡±ç"},
]

# --- Data Loading and Model Functions ---
@st.cache_resource
def load_cultural_data():
    return load_data_from_folders('data')

@st.cache_resource
def load_image_model():
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model = CulturalClassifier(num_classes=4)
    if os.path.exists('models/cultural_classifier.pth'):
        model.load_state_dict(torch.load('models/cultural_classifier.pth', map_location=device))
        model.eval()
        return model
    else:
        return None

@st.cache_resource
def load_text_assets():
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model_path = 'models/text_classifier.pth'
    vectorizer_path = 'models/text_vectorizer.pkl'

    text_model = None
    text_vectorizer = None

    if os.path.exists(model_path) and os.path.exists(vectorizer_path):
        try:
            # Load vectorizer first to get input dimension
            text_vectorizer = joblib.load(vectorizer_path)
            input_dim = len(text_vectorizer.vocabulary_)

            # Load model
            text_model = TextClassifier(input_dim, hidden_dim=128, num_classes=4)
            text_model.load_state_dict(torch.load(model_path, map_location=device))
            text_model.eval()

        except Exception as e:
            st.error(f"‡∞ü‡±Ü‡∞ï‡±ç‡∞∏‡±ç‡∞ü‡±ç ‡∞Æ‡±ã‡∞°‡∞≤‡±ç ‡∞≤‡±á‡∞¶‡∞æ ‡∞µ‡±Ü‡∞ï‡±ç‡∞ü‡∞∞‡±à‡∞ú‡∞∞‡±ç‚Äå‡∞®‡±Å ‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç‡∞≤‡±ã ‡∞≤‡±ã‡∞™‡∞Ç: {e}")
            text_model = None
            text_vectorizer = None

    return text_model, text_vectorizer

# Function to classify content
def classify_content(image):
    model = load_image_model()
    if model is None:
        return "‡∞Æ‡±ã‡∞°‡∞≤‡±ç ‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞≤‡±á‡∞¶‡±Å"

    # Preprocess image
    processed_image = preprocess_image(image)

    # Convert to tensor
    transform = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])

    image_tensor = transform(image).unsqueeze(0)

    # Predict
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    with torch.no_grad():
        outputs = model(image_tensor.to(device))
        _, predicted = torch.max(outputs, 1)

    # Map prediction to category
    category_map = {0: '‡∞∏‡±ç‡∞Æ‡∞æ‡∞∞‡∞ï‡∞æ‡∞≤‡±Å', 1: '‡∞∏‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø', 2: '‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞æ‡∞Ø‡∞æ‡∞≤‡±Å', 3: '‡∞ú‡∞æ‡∞®‡∞™‡∞¶ ‡∞ï‡∞•‡∞≤‡±Å'}
    return category_map[predicted.item()]

# --- Search Functions ---
def get_search_results(category, content_type, search_query):
    """
    This function interfaces with both local data and Swecha API to get relevant results
    based on the search query.
    """
    results = []
    
    # First, try to get results from local data
    if st.session_state.cultural_data and category in st.session_state.cultural_data:
        category_data = st.session_state.cultural_data[category]
        
        if content_type in category_data:
            # Simple text match for direct results
            local_results = [
                item for item in category_data[content_type]
                if search_query.lower() in item['name'].lower() or
                   (content_type == 'texts' and search_query.lower() in item.get('content', '').lower())
            ]
            results.extend(local_results)
            
            # If no results found with simple matching and a query exists, try semantic search
            if not local_results and search_query:
                semantic_results = get_semantic_search_results(category, content_type, search_query)
                results.extend(semantic_results)
    
    # If we have a search query and API is enabled, also try to get results from Swecha API
    if search_query and search_query.strip() and st.session_state.use_swecha_api:
        try:
            # Check if Swecha API is accessible
            if swecha_client.health_check():
                swecha_results = get_swecha_search_results(
                    query=search_query,
                    category=category,
                    content_type=content_type,
                    limit=10
                )
                
                # Add source indicator to Swecha results
                for result in swecha_results:
                    result['source'] = 'swecha_api'
                
                results.extend(swecha_results)
                
                # Show info about API results
                if swecha_results:
                    st.info(f"Found {len(swecha_results)} additional results from Swecha API")
            else:
                st.warning("Swecha API is currently unavailable. Showing only local results.")
        except Exception as e:
            st.warning(f"Could not fetch results from Swecha API: {str(e)}")
    
    return results

def get_semantic_search_results(category, content_type, search_query):
    """
    This function performs a semantic search for text content.
    """
    if content_type == 'texts':
        if st.session_state.text_model is None or st.session_state.text_vectorizer is None:
            return []

        text_data = st.session_state.cultural_data[category].get('texts', [])
        if not text_data:
            return []

        # Extract all text content and file data
        all_text_content = [item['content'] for item in text_data]

        # Transform the search query into a vector
        try:
            query_vector = st.session_state.text_vectorizer.transform([search_query])
        except ValueError as e:
            return []

        # Get vectors for all documents
        document_vectors = st.session_state.text_vectorizer.transform(all_text_content)

        # Calculate cosine similarity
        similarities = cosine_similarity(query_vector, document_vectors).flatten()

        # Get the indices of the most similar documents (top 5)
        top_indices = similarities.argsort()[-5:][::-1]

        # Filter for results with a similarity score > 0 (or a small threshold)
        top_results = [
            text_data[i]
            for i in top_indices
            if similarities[i] > 0
        ]

        return top_results
    else:
        return []

# --- Display Functions ---
def display_content_selection_page():
    # Map English categories to Telugu
    category_names = {
        "monuments": "‡∞∏‡±ç‡∞Æ‡∞æ‡∞∞‡∞ï‡∞æ‡∞≤‡±Å",
        "culture": "‡∞∏‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø",
        "traditions": "‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞æ‡∞Ø‡∞æ‡∞≤‡±Å",
        "folktales": "‡∞ú‡∞æ‡∞®‡∞™‡∞¶ ‡∞ï‡∞•‡∞≤‡±Å"
    }

    # Set background image based on category
    bg_images = {
        "monuments": r"C:\Users\DELL\OneDrive\Desktop\streamlit app\background\monuments_image.jpg",
        "culture": r"C:\Users\DELL\OneDrive\Desktop\streamlit app\background\culture_image.jpg",
        "traditions": r"C:\Users\DELL\OneDrive\Desktop\streamlit app\background\traditions_image.jpg",
        "folktales": r"C:\Users\DELL\OneDrive\Desktop\streamlit app\background\folktales_image.jpg"
    }
    
    if st.session_state.current_category in bg_images:
        set_background_image(bg_images[st.session_state.current_category])

    # Page header
    st.markdown(f'<div class="page-header">{category_names[st.session_state.current_category]}</div>', unsafe_allow_html=True)

    # Content type selection
    st.markdown('<div class="content-display">', unsafe_allow_html=True)

    # Use radio buttons for content type selection
    st.markdown('<h3 style="text-align: center; color: #5D4037; margin-bottom: 10px; text-shadow: 1px 1px 4px rgba(0,0,0,0.7);">‡∞ï‡∞Ç‡∞ü‡±Ü‡∞Ç‡∞ü‡±ç ‡∞∞‡∞ï‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø</h3>', unsafe_allow_html=True)
    st.session_state.selected_content_type = st.radio(
        "",
        ["‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡±Å", "‡∞µ‡±Ä‡∞°‡∞ø‡∞Ø‡±ã‡∞≤‡±Å", "‡∞ü‡±Ü‡∞ï‡±ç‡∞∏‡±ç‡∞ü‡±ç ‡∞´‡±à‡∞≤‡±ç‡∞∏‡±ç"],
        key="content_type_radio",
        horizontal=True,
        label_visibility="collapsed"
    )
    # Get available content names for dropdown if culture or folktales
    content_options = [""]
    if st.session_state.current_category in ["culture", "folktales"] and st.session_state.cultural_data:
        content_type_en = "images" if st.session_state.selected_content_type == "‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡±Å" else \
                        "videos" if st.session_state.selected_content_type == "‡∞µ‡±Ä‡∞°‡∞ø‡∞Ø‡±ã‡∞≤‡±Å" else "texts"
        
        if st.session_state.current_category in st.session_state.cultural_data:
            category_data = st.session_state.cultural_data[st.session_state.current_category]
            if content_type_en in category_data:
                # Remove file extensions from the names for display
                content_options.extend([os.path.splitext(item['name'])[0] for item in category_data[content_type_en]])

    # Search bar with dropdown for culture and folktales
    st.markdown('<div class="search-container">', unsafe_allow_html=True)
    
    if st.session_state.current_category in ["culture", "folktales"]:
        # Use dropdown for culture and folktales
        search_query = st.selectbox(
            "‡∞µ‡±Ü‡∞§‡∞ï‡∞Ç‡∞°‡∞ø:",
            options=content_options,
            key="search_dropdown",
            format_func=lambda x: os.path.splitext(x)[0] if x else "‡∞Æ‡±Ä‡∞∞‡±Å ‡∞ï‡±ã‡∞∞‡±Å‡∞ï‡±Å‡∞®‡±á‡∞¶‡∞ø ‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø ...",
        index=0
        )
    else:
        # Use text input for other categories
        search_query = st.text_input(
            "‡∞µ‡±Ü‡∞§‡∞ï‡∞Ç‡∞°‡∞ø:",
            value=st.session_state.search_query,
            placeholder="‡∞Æ‡±Ä‡∞∞‡±Å ‡∞ï‡±ã‡∞∞‡±Å‡∞ï‡±Å‡∞®‡±á‡∞¶‡∞ø ‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞ü‡±à‡∞™‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø...",
            key="search_input"
        )
    
    st.markdown('</div>', unsafe_allow_html=True)

    # UPDATED: Button row with smaller buttons
    st.markdown('<div class="button-row">', unsafe_allow_html=True)
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button("‡∞∂‡±ã‡∞ß‡∞®", use_container_width=True, key="search_button"):
            st.session_state.search_query = search_query
            st.session_state.show_results = True
            st.rerun()
    st.markdown('</div>', unsafe_allow_html=True)

    # UPDATED: Back button - smaller
    st.markdown('<div class="centered-button">', unsafe_allow_html=True)
    if st.button("‚Üê ‡∞µ‡±Ü‡∞®‡∞ï‡±ç‡∞ï‡∞ø", key="back_button", use_container_width=True):
        st.session_state.content_page = False
        st.session_state.selected_content_type = None
        st.session_state.search_query = ""
        st.session_state.show_results = False
        st.rerun()
    st.markdown('</div>', unsafe_allow_html=True)

    st.markdown('</div>', unsafe_allow_html=True)

def display_search_results_page():
    # Map Telugu to English for internal logic
    telugu_to_english = {
        "‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡±Å": "images",
        "‡∞µ‡±Ä‡∞°‡∞ø‡∞Ø‡±ã‡∞≤‡±Å": "videos",
        "‡∞ü‡±Ü‡∞ï‡±ç‡∞∏‡±ç‡∞ü‡±ç ‡∞´‡±à‡∞≤‡±ç‡∞∏‡±ç": "texts"
    }

    # Map English categories to Telugu
    category_names = {
        "monuments": "‡∞∏‡±ç‡∞Æ‡∞æ‡∞∞‡∞ï‡∞æ‡∞≤‡±Å",
        "culture": "‡∞∏‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø",
        "traditions": "‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞æ‡∞Ø‡∞æ‡∞≤‡±Å",
        "folktales": "‡∞ú‡∞æ‡∞®‡∞™‡∞¶ ‡∞ï‡∞•‡∞≤‡±Å"
    }

    content_type_names = {
        "images": "‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡±Å",
        "videos": "‡∞µ‡±Ä‡∞°‡∞ø‡∞Ø‡±ã‡∞≤‡±Å",
        "texts": "‡∞ü‡±Ü‡∞ï‡±ç‡∞∏‡±ç‡∞ü‡±ç ‡∞´‡±à‡∞≤‡±ç‡∞∏‡±ç"
    }

    # Set background image based on category
    bg_images = {
        "monuments": r"C:\Users\DELL\OneDrive\Desktop\streamlit app\background\monuments_image.jpg",
        "culture": r"C:\Users\DELL\OneDrive\Desktop\streamlit app\background\culture_image.jpg",
        "traditions": r"C:\Users\DELL\OneDrive\Desktop\streamlit app\background\traditions_image.jpg",
        "folktales": r"C:\Users\DELL\OneDrive\Desktop\streamlit app\background\folktales_image.jpg"
    }
    
    if st.session_state.current_category in bg_images:
        set_background_image(bg_images[st.session_state.current_category])

    # Retrieve results
    content_type_en = telugu_to_english[st.session_state.selected_content_type]
    search_results = get_search_results(st.session_state.current_category, content_type_en, st.session_state.search_query)

    # Page header
    st.markdown(f'<div class="page-header">{category_names[st.session_state.current_category]}</div>', unsafe_allow_html=True)
    st.markdown(f'<div class="sub-header">{content_type_names[content_type_en]} - ‡∞∂‡±ã‡∞ß‡∞®: "{st.session_state.search_query}"</div>', unsafe_allow_html=True)

    # Display results
    if search_results:
        # Display images in a centered layout
        if content_type_en == 'images':
            for img_data in search_results:
                try:
                    # Create a centered container for each image
                    col1, col2, col3 = st.columns([1, 2, 1])
                    with col2:
                        st.image(
                            img_data['path'],
                            use_column_width=True
                        )
                        # Show source indicator
                        if img_data.get('source') == 'swecha_api':
                            st.info("üåê Swecha API ‡∞®‡±Å‡∞Ç‡∞°‡∞ø")
                        else:
                            st.info("üíæ ‡∞≤‡±ã‡∞ï‡∞≤‡±ç ‡∞°‡±á‡∞ü‡∞æ ‡∞®‡±Å‡∞Ç‡∞°‡∞ø")
                except Exception as e:
                    st.error(f"‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞™‡±ç‡∞∞‡∞¶‡∞∞‡±ç‡∞∂‡∞ø‡∞Ç‡∞ö‡∞°‡∞Ç‡∞≤‡±ã ‡∞≤‡±ã‡∞™‡∞Ç: {e}")

        # Display texts
        elif content_type_en == 'texts':
            for text_data in search_results:
                # Center text content
                col1, col2, col3 = st.columns([1, 3, 1])
                with col2:
                    st.write(text_data['content'])
                    # Show source indicator
                    if text_data.get('source') == 'swecha_api':
                        st.info("üåê Swecha API ‡∞®‡±Å‡∞Ç‡∞°‡∞ø")
                    else:
                        st.info("üíæ ‡∞≤‡±ã‡∞ï‡∞≤‡±ç ‡∞°‡±á‡∞ü‡∞æ ‡∞®‡±Å‡∞Ç‡∞°‡∞ø")

        # Display videos
        elif content_type_en == 'videos':
            for video_data in search_results:
                # Center video content
                col1, col2, col3 = st.columns([1, 2, 1])
                with col2:
                    st.video(video_data['path'])
                    # Show source indicator
                    if video_data.get('source') == 'swecha_api':
                        st.info("üåê Swecha API ‡∞®‡±Å‡∞Ç‡∞°‡∞ø")
                    else:
                        st.info("üíæ ‡∞≤‡±ã‡∞ï‡∞≤‡±ç ‡∞°‡±á‡∞ü‡∞æ ‡∞®‡±Å‡∞Ç‡∞°‡∞ø")
    else:
        st.warning(f"'{st.session_state.search_query}' ‡∞ï‡±ã‡∞∏‡∞Ç {category_names[st.session_state.current_category]}‡∞≤‡±ã {content_type_names[content_type_en]} ‡∞ï‡∞®‡±Å‡∞ó‡±ä‡∞®‡∞¨‡∞°‡∞≤‡±á‡∞¶‡±Å.")

    # Single back button at the bottom
    st.markdown('<div class="centered-button">', unsafe_allow_html=True)
    if st.button("‚Üê ‡∞µ‡±Ü‡∞®‡∞ï‡±ç‡∞ï‡∞ø", key="back_from_results", use_container_width=True):
        st.session_state.show_results = False
        st.rerun()
    st.markdown('</div>', unsafe_allow_html=True)

def display_riddles_page():
    # Set background for riddles page
    set_background_image(r"C:\Users\DELL\OneDrive\Desktop\streamlit app\background\background_image.jpg")
    
    # Page header
    st.markdown('<div class="page-header">‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞™‡±ä‡∞°‡±Å‡∞™‡±Å ‡∞ï‡∞•‡∞≤‡±Å</div>', unsafe_allow_html=True)
    
    # Get current riddle
    current = riddles[st.session_state.riddle_index]
    
    # Display riddle
    st.markdown(f'<div class="riddle-box">{current["question"]}</div>', unsafe_allow_html=True)
    
    # Display answer if revealed
    if st.session_state.show_riddle_answer:
        st.markdown(f'<div class="answer-box">‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç: {current["answer"]}</div>', unsafe_allow_html=True)
    
    # Navigation buttons
    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("‡∞Æ‡±Å‡∞®‡±Å‡∞™‡∞ü‡∞ø ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®", key="prev_btn", use_container_width=True):
            if st.session_state.riddle_index > 0:
                st.session_state.riddle_index -= 1
            st.session_state.show_riddle_answer = False
            st.rerun()
    with col2:
        if st.button("‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞ö‡±Ç‡∞™‡∞ø‡∞Ç‡∞ö‡±Å", key="ans_btn", use_container_width=True):
            st.session_state.show_riddle_answer = True
            st.rerun()
    with col3:
        if st.button("‡∞§‡∞∞‡±Å‡∞µ‡∞æ‡∞§‡∞ø ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®", key="next_btn", use_container_width=True):
            if st.session_state.riddle_index < len(riddles) - 1:
                st.session_state.riddle_index += 1
            st.session_state.show_riddle_answer = False
            st.rerun()
    
    # Back button
    st.markdown('<div class="centered-button">', unsafe_allow_html=True)
    if st.button("‚Üê ‡∞µ‡±Ü‡∞®‡∞ï‡±ç‡∞ï‡∞ø", key="back_from_riddles", use_container_width=True):
        st.session_state.show_riddles = False
        st.rerun()
    st.markdown('</div>', unsafe_allow_html=True)

def display_api_status():
    """Display Swecha API status and configuration"""
    # Set background for API status page
    set_background_image(r"C:\Users\DELL\OneDrive\Desktop\streamlit app\background\background_image.jpg")
    
    # Page header
    st.markdown('<div class="page-header">Swecha API ‡∞∏‡±ç‡∞•‡∞ø‡∞§‡∞ø</div>', unsafe_allow_html=True)
    
    st.markdown('<div class="content-display">', unsafe_allow_html=True)
    
    # API Status
    st.markdown('<h3 style="text-align: center; color: #5D4037; margin-bottom: 20px;">API ‡∞∏‡±ç‡∞•‡∞ø‡∞§‡∞ø</h3>', unsafe_allow_html=True)
    
    # Check API health
    with st.spinner("API ‡∞∏‡±ç‡∞•‡∞ø‡∞§‡∞ø‡∞®‡∞ø ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Æ‡±Å..."):
        api_healthy = swecha_client.health_check()
    
    if api_healthy:
        st.success("‚úÖ Swecha API ‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞â‡∞Ç‡∞¶‡∞ø")
        
        # Get API statistics
        try:
            stats = swecha_client.get_statistics()
            if stats:
                st.info("üìä API ‡∞ó‡∞£‡∞æ‡∞Ç‡∞ï‡∞æ‡∞≤‡±Å:")
                st.json(stats)
        except:
            st.info("üìä API ‡∞ó‡∞£‡∞æ‡∞Ç‡∞ï‡∞æ‡∞≤‡±Å ‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞≤‡±á‡∞µ‡±Å")
    else:
        st.error("‚ùå Swecha API ‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞≤‡±á‡∞¶‡±Å")
        st.warning("‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Ä ‡∞á‡∞Ç‡∞ü‡∞∞‡±ç‡∞®‡±Ü‡∞ü‡±ç ‡∞ï‡∞®‡±Ü‡∞ï‡±ç‡∞∑‡∞®‡±ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å API URL ‡∞®‡∞ø ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø")
    
    # API Configuration
    st.markdown('<h3 style="text-align: center; color: #5D4037; margin-bottom: 20px;">API ‡∞ï‡∞æ‡∞®‡±ç‡∞´‡∞ø‡∞ó‡∞∞‡±á‡∞∑‡∞®‡±ç</h3>', unsafe_allow_html=True)
    
    # API URL
    st.text_input("API URL", value=swecha_client.base_url, disabled=True)
    
    # Toggle API usage
    st.session_state.use_swecha_api = st.checkbox(
        "Swecha API ‡∞®‡∞ø ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        value=st.session_state.use_swecha_api,
        help="‡∞à ‡∞é‡∞Ç‡∞™‡∞ø‡∞ï‡∞®‡±Å ‡∞Ü‡∞´‡±ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±á, ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞≤‡±ã‡∞ï‡∞≤‡±ç ‡∞°‡±á‡∞ü‡∞æ‡∞®‡±Å ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞∞‡±Å"
    )
    
    # Test API endpoints
    st.markdown('<h3 style="text-align: center; color: #5D4037; margin-bottom: 20px;">API ‡∞ü‡±Ü‡∞∏‡±ç‡∞ü‡∞ø‡∞Ç‡∞ó‡±ç</h3>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üîç ‡∞∂‡±ã‡∞ß‡∞® ‡∞ü‡±Ü‡∞∏‡±ç‡∞ü‡±ç", use_container_width=True):
            test_results = get_swecha_search_results("telugu", limit=5)
            if test_results:
                st.success(f"‡∞∂‡±ã‡∞ß‡∞® ‡∞ü‡±Ü‡∞∏‡±ç‡∞ü‡±ç ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç! {len(test_results)} ‡∞´‡∞≤‡∞ø‡∞§‡∞æ‡∞≤‡±Å ‡∞ï‡∞®‡±Å‡∞ó‡±ä‡∞®‡∞¨‡∞°‡±ç‡∞°‡∞æ‡∞Ø‡∞ø")
                st.json(test_results[:2])  # Show first 2 results
            else:
                st.warning("‡∞∂‡±ã‡∞ß‡∞® ‡∞ü‡±Ü‡∞∏‡±ç‡∞ü‡±ç ‡∞µ‡∞ø‡∞´‡∞≤‡∞Ç")
    
    with col2:
        if st.button("üì§ ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ü‡±Ü‡∞∏‡±ç‡∞ü‡±ç", use_container_width=True):
            # Create a test file
            test_file_path = "test_upload.txt"
            with open(test_file_path, "w", encoding="utf-8") as f:
                f.write("‡∞á‡∞¶‡∞ø ‡∞í‡∞ï ‡∞™‡∞∞‡±Ä‡∞ï‡±ç‡∞∑ ‡∞´‡±à‡∞≤‡±ç")
            
            try:
                success = upload_to_swecha(
                    test_file_path, 
                    "culture", 
                    "texts", 
                    {"test": True, "description": "Test upload"}
                )
                if success:
                    st.success("‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ü‡±Ü‡∞∏‡±ç‡∞ü‡±ç ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç!")
                else:
                    st.warning("‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ü‡±Ü‡∞∏‡±ç‡∞ü‡±ç ‡∞µ‡∞ø‡∞´‡∞≤‡∞Ç")
                
                # Clean up test file
                if os.path.exists(test_file_path):
                    os.remove(test_file_path)
            except Exception as e:
                st.error(f"‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ü‡±Ü‡∞∏‡±ç‡∞ü‡±ç ‡∞≤‡±ã‡∞™‡∞Ç: {str(e)}")
    
    # Back button
    st.markdown('<div class="centered-button">', unsafe_allow_html=True)
    if st.button("‚Üê ‡∞µ‡±Ü‡∞®‡∞ï‡±ç‡∞ï‡∞ø", key="back_from_api_status", use_container_width=True):
        st.session_state.show_api_status = False
        st.rerun()
    st.markdown('</div>')
    
    st.markdown('</div>', unsafe_allow_html=True)

def display_upload_section():
    # Set background for upload page
    set_background_image(r"C:\Users\DELL\OneDrive\Desktop\streamlit app\background\background_image.jpg")
    
    # Page header
    st.markdown('<div class="page-header">‡∞´‡±à‡∞≤‡±ç ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø</div>', unsafe_allow_html=True)
    
    # Category selection
    st.markdown('<div class="content-display">', unsafe_allow_html=True)
    
    # Use radio buttons for category selection
    st.markdown('<h3 style="text-align: center; color: #5D4037; margin-bottom: 10px; text-shadow: 1px 1px 4px rgba(0,0,0,0.7);">‡∞µ‡∞∞‡±ç‡∞ó‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø</h3>', unsafe_allow_html=True)
    upload_category = st.radio(
        "",
        ["‡∞∏‡±ç‡∞Æ‡∞æ‡∞∞‡∞ï‡∞æ‡∞≤‡±Å", "‡∞∏‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø", "‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞æ‡∞Ø‡∞æ‡∞≤‡±Å", "‡∞ú‡∞æ‡∞®‡∞™‡∞¶ ‡∞ï‡∞•‡∞≤‡±Å"],
        key="upload_category",
        horizontal=True,
        label_visibility="collapsed"
    )
    
    # Map Telugu category names to English for internal logic
    category_map = {
        "‡∞∏‡±ç‡∞Æ‡∞æ‡∞∞‡∞ï‡∞æ‡∞≤‡±Å": "monuments",
        "‡∞∏‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø": "culture",
        "‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞æ‡∞Ø‡∞æ‡∞≤‡±Å": "traditions",
        "‡∞ú‡∞æ‡∞®‡∞™‡∞¶ ‡∞ï‡∞•‡∞≤‡±Å": "folktales"
    }
    
    # Content type selection based on category
    st.markdown('<h3 style="text-align: center; color: #5D4037; margin-bottom: 10px; text-shadow: 1px 1px 4px rgba(0,0,0,0.7);">‡∞ï‡∞Ç‡∞ü‡±Ü‡∞Ç‡∞ü‡±ç ‡∞∞‡∞ï‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø</h3>', unsafe_allow_html=True)
    upload_content_type = st.radio(
        "",
        ["‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡±Å", "‡∞µ‡±Ä‡∞°‡∞ø‡∞Ø‡±ã‡∞≤‡±Å", "‡∞ü‡±Ü‡∞ï‡±ç‡∞∏‡±ç‡∞ü‡±ç ‡∞´‡±à‡∞≤‡±ç‡∞∏‡±ç"],
        key="upload_content_type",
        horizontal=True,
        label_visibility="collapsed"
    )
    
    # File uploader based on selected content type
    file_types = {
        "‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡±Å": ['jpg', 'jpeg', 'png'],
        "‡∞µ‡±Ä‡∞°‡∞ø‡∞Ø‡±ã‡∞≤‡±Å": ['mp4', 'mov', 'avi'],
        "‡∞ü‡±Ü‡∞ï‡±ç‡∞∏‡±ç‡∞ü‡±ç ‡∞´‡±à‡∞≤‡±ç‡∞∏‡±ç": ['txt']
    }
    
    # Center the uploader text
    st.markdown("""
    <style>
    .upload-label {
        text-align: center;
        display: block;
        font-size: 1.3rem;
        font-weight: 700;
        color: #5D4037;
        margin-bottom: 8px;
    }
    .upload-info {
        text-align: center;
        display: block;
        font-size: 1.1rem;
        color: #5D4037;
        margin: 10px 0;
        padding: 10px;
        background-color: rgba(255, 255, 255, 0.7);
        border-radius: 8px;
    }
    .centered-content {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        width: 100%;
    }
    .centered-upload {
        display: flex;
        justify-content: center;
        width: 100%;
    }
    .success-message {
        text-align: center;
        color: green;
        font-weight: bold;
        margin: 15px 0;
        padding: 10px;
        background-color: rgba(0, 255, 0, 0.1);
        border-radius: 8px;
        border: 1px solid green;
    }
    </style>
    """, unsafe_allow_html=True)
    
    st.markdown('<p class="upload-label">‡∞´‡±à‡∞≤‡±ç‚Äå‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø</p>', unsafe_allow_html=True)
    
    # Create a container for the file uploader to center it
    st.markdown('<div class="centered-upload">', unsafe_allow_html=True)
    uploaded_file = st.file_uploader(
        "",
        type=file_types[upload_content_type],
        help=f"{upload_content_type} ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        label_visibility="collapsed"
    )
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Display preview of uploaded content in the center (only if file is selected)
    if uploaded_file is not None:
        st.markdown('<div class="centered-content">', unsafe_allow_html=True)
        
        if upload_content_type == "‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡±Å":
            try:
                image = Image.open(uploaded_file)
                st.image(image, width=300, caption="‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞® ‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞Ç")
            except Exception as e:
                st.error(f"‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞™‡±ç‡∞∞‡∞æ‡∞∏‡±Ü‡∞∏‡±ç ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç‡∞≤‡±ã ‡∞≤‡±ã‡∞™‡∞Ç: {e}")
        
        elif upload_content_type == "‡∞µ‡±Ä‡∞°‡∞ø‡∞Ø‡±ã‡∞≤‡±Å":
            st.video(uploaded_file, format='video/mp4')
            st.markdown('<p style="text-align: center;">‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞® ‡∞µ‡±Ä‡∞°‡∞ø‡∞Ø‡±ã</p>', unsafe_allow_html=True)
            
        elif upload_content_type == "‡∞ü‡±Ü‡∞ï‡±ç‡∞∏‡±ç‡∞ü‡±ç ‡∞´‡±à‡∞≤‡±ç‡∞∏‡±ç":
            try:
                content = uploaded_file.getvalue().decode('utf-8')
                # Show first 200 characters as preview
                preview = content[:200] + "..." if len(content) > 200 else content
                st.text_area("‡∞´‡±à‡∞≤‡±ç ‡∞™‡±ç‡∞∞‡∞ø‡∞µ‡±ç‡∞Ø‡±Ç", value=preview, height=150, disabled=True)
            except Exception as e:
                st.error(f"‡∞ü‡±Ü‡∞ï‡±ç‡∞∏‡±ç‡∞ü‡±ç ‡∞´‡±à‡∞≤‡±ç‚Äå‡∞®‡±Å ‡∞ö‡∞¶‡∞µ‡∞°‡∞Ç‡∞≤‡±ã ‡∞≤‡±ã‡∞™‡∞Ç: {e}")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Upload button
        st.markdown('<div class="centered-button">', unsafe_allow_html=True)
        if st.button("‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø", key="upload_confirm_button", use_container_width=True):
            # Create directory if it doesn't exist
            category_en = category_map[upload_category]
            content_type_en = "images" if upload_content_type == "‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡±Å" else \
                            "videos" if upload_content_type == "‡∞µ‡±Ä‡∞°‡∞ø‡∞Ø‡±ã‡∞≤‡±Å" else "texts"
            
            os.makedirs(f"data/{category_en}/{content_type_en}", exist_ok=True)
            
            # Save file with timestamp to avoid name conflicts
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            file_extension = uploaded_file.name.split('.')[-1]
            file_name = f"{timestamp}.{file_extension}"
            file_path = os.path.join(f"data/{category_en}/{content_type_en}", file_name)
            
            with open(file_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            
            # Also try to upload to Swecha API if enabled
            if st.session_state.use_swecha_api:
                try:
                    if swecha_client.health_check():
                        # Prepare metadata for Swecha API
                        metadata = {
                            "title": uploaded_file.name,
                            "description": f"Uploaded content for {upload_category} - {upload_content_type}",
                            "language": "te",  # Telugu
                            "tags": [upload_category, upload_content_type, "telugu", "cultural_heritage"]
                        }
                        
                        # Upload to Swecha API
                        swecha_success = upload_to_swecha(
                            file_path=file_path,
                            category=category_en,
                            content_type=content_type_en,
                            metadata=metadata
                        )
                        
                        if swecha_success:
                            st.success("‡∞´‡±à‡∞≤‡±ç ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç‡∞ó‡∞æ ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø (‡∞≤‡±ã‡∞ï‡∞≤‡±ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å Swecha API)")
                        else:
                            st.warning("‡∞´‡±à‡∞≤‡±ç ‡∞≤‡±ã‡∞ï‡∞≤‡±ç‚Äå‡∞ó‡∞æ ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø, ‡∞ï‡∞æ‡∞®‡±Ä Swecha API ‡∞ï‡∞ø ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞≤‡±á‡∞ï‡∞™‡±ã‡∞Ø‡∞æ‡∞Æ‡±Å")
                    else:
                        st.warning("Swecha API ‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞≤‡±á‡∞¶‡±Å. ‡∞´‡±à‡∞≤‡±ç ‡∞≤‡±ã‡∞ï‡∞≤‡±ç‚Äå‡∞ó‡∞æ ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø.")
                except Exception as e:
                    st.warning(f"‡∞´‡±à‡∞≤‡±ç ‡∞≤‡±ã‡∞ï‡∞≤‡±ç‚Äå‡∞ó‡∞æ ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø, ‡∞ï‡∞æ‡∞®‡±Ä Swecha API ‡∞ï‡∞ø ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞≤‡±á‡∞ï‡∞™‡±ã‡∞Ø‡∞æ‡∞Æ‡±Å: {str(e)}")
            else:
                st.info("Swecha API ‡∞®‡∞ø‡∞∑‡±ç‡∞ï‡±ç‡∞∞‡∞ø‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞´‡±à‡∞≤‡±ç ‡∞≤‡±ã‡∞ï‡∞≤‡±ç‚Äå‡∞ó‡∞æ ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø.")
            
            # Show success message
            st.markdown('<div class="success-message">‡∞´‡±à‡∞≤‡±ç ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç‡∞ó‡∞æ ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø!</div>', unsafe_allow_html=True)
            
            # Add a back button after successful upload
            st.markdown('<div class="centered-button">', unsafe_allow_html=True)
            if st.button("‚Üê ‡∞µ‡±Ü‡∞®‡∞ï‡±ç‡∞ï‡∞ø", key="back_after_upload", use_container_width=True):
                st.session_state.show_upload = False
                st.rerun()
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Don't rerun immediately - let the user see the success message and back button
        else:
            # Regular back button when no upload has been done yet
            st.markdown('<div class="centered-button">', unsafe_allow_html=True)
            if st.button("‚Üê ‡∞µ‡±Ü‡∞®‡∞ï‡±ç‡∞ï‡∞ø", key="back_from_upload", use_container_width=True):
                st.session_state.show_upload = False
                st.rerun()
            st.markdown('</div>', unsafe_allow_html=True)
            
        st.markdown('</div>', unsafe_allow_html=True)
    else:
        # Regular back button when no file is selected
        st.markdown('<div class="centered-button">', unsafe_allow_html=True)
        if st.button("‚Üê ‡∞µ‡±Ü‡∞®‡∞ï‡±ç‡∞ï‡∞ø", key="back_from_upload", use_container_width=True):
            st.session_state.show_upload = False
            st.rerun()
        st.markdown('</div>', unsafe_allow_html=True)

    st.markdown('</div>', unsafe_allow_html=True)

def display_main_page():
    # Set main background image
    set_background_image(r"C:\Users\DELL\OneDrive\Desktop\streamlit app\background\background_image.jpg")
    
    # Main header
    st.markdown('<h1 class="main-header">‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞∏‡∞æ‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø‡∞ï ‡∞µ‡∞æ‡∞∞‡∞∏‡∞§‡±ç‡∞µ‡∞Ç</h1>', unsafe_allow_html=True)

    # Category buttons in a grid
    st.markdown('<div class="button-grid-container">', unsafe_allow_html=True)
    st.markdown('<div class="category-grid">', unsafe_allow_html=True)

    # Create 4 columns for the 4 categories
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        if st.button("‡∞∏‡±ç‡∞Æ‡∞æ‡∞∞‡∞ï‡∞æ‡∞≤‡±Å", key="monuments_button", use_container_width=True):
            st.session_state.current_category = "monuments"
            st.session_state.content_page = True
            st.rerun()

    with col2:
        if st.button("‡∞∏‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø", key="culture_button", use_container_width=True):
            st.session_state.current_category = "culture"
            st.session_state.content_page = True
            st.rerun()

    with col3:
        if st.button("‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞æ‡∞Ø‡∞æ‡∞≤‡±Å", key="traditions_button", use_container_width=True):
            st.session_state.current_category = "traditions"
            st.session_state.content_page = True
            st.rerun()

    with col4:
        if st.button("‡∞ú‡∞æ‡∞®‡∞™‡∞¶ ‡∞ï‡∞•‡∞≤‡±Å", key="folktales_button", use_container_width=True):
            st.session_state.current_category = "folktales"
            st.session_state.content_page = True
            st.rerun()

    st.markdown('</div>', unsafe_allow_html=True)  # Close category-grid

    # Upload, Riddles, and API Status buttons below the category buttons
    st.markdown('<div class="upload-button-container">', unsafe_allow_html=True)
    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("‡∞´‡±à‡∞≤‡±ç ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø", key="upload_button", use_container_width=True):
            st.session_state.show_upload = True
            st.rerun()
    with col2:
        if st.button("‡∞™‡±ä‡∞°‡±Å‡∞™‡±Å ‡∞ï‡∞•‡∞≤‡±Å", key="riddles_button", use_container_width=True):
            st.session_state.show_riddles = True
            st.rerun()
    with col3:
        if st.button("üîå API ‡∞∏‡±ç‡∞•‡∞ø‡∞§‡∞ø", key="api_status_button", use_container_width=True):
            st.session_state.show_api_status = True
            st.rerun()
    st.markdown('</div>', unsafe_allow_html=True)  # Close upload-button-container

    st.markdown('</div>', unsafe_allow_html=True)  # Close button-grid-container

# --- Main App Logic ---
def main():
    # Load data and models
    if not st.session_state.data_loaded:
        with st.spinner("‡∞°‡±á‡∞ü‡∞æ ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Æ‡±ã‡∞°‡∞≤‡±ç‡∞∏‡±ç ‡∞≤‡±ã‡∞°‡±ç ‡∞Ö‡∞µ‡±Å‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Ø‡∞ø..."):
            st.session_state.cultural_data = load_cultural_data()
            st.session_state.text_model, st.session_state.text_vectorizer = load_text_assets()
            st.session_state.data_loaded = True

    # Display appropriate page based on session state
    if st.session_state.show_upload:
        display_upload_section()
    elif st.session_state.show_riddles:
        display_riddles_page()
    elif st.session_state.show_api_status:
        display_api_status()
    elif st.session_state.content_page:
        if st.session_state.show_results:
            display_search_results_page()
        else:
            display_content_selection_page()
    else:
        display_main_page()

if __name__ == "__main__":
    main()